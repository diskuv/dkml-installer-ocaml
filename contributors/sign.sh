#!/bin/bash
#
# Purpose: Sign the latest DKML installer
# Requirements:
#   1. Yubikey 5 Series hardware device
#       * The Diskuv signing keys must be loaded onto the hardware device.
#       * The keys are _not_ extractable. If you need another device contact
#         support AT diskuv.com.
#   2. Yubico PIV Tool
#       * Download and install yubico-piv-tool-2.3.0-win64.msi or later from
#         https://developers.yubico.com/yubico-piv-tool/Releases.
#   3. Windows machine
#       For now this script expects Yubico PIV Tool to be installed in a
#       Windows specific path.
#   4. UNIX Bash shell capability
#       * On Windows you can run this script with `with-dkml sign.sh` if you
#         already have Diskuv OCaml installed (see
#         https://github.com/diskuv/dkml-installer-ocaml/releases).
#       * On Windows you should also be able to use Git Bash, MSYS2 or Cygwin.
#         But Git Bash and Cygwin will require that you install `osslsigncode`
#         and GnuTLS' `p11tool` and place them in the PATH
set -euf

# Signing tool
#   1. `osslsigncode`
#       * This is the current tool.
#   2. `jsign` (alternative)
#       * This has been tested with:
#           Java(TM) SE Runtime Environment (build 17.0.3.1+2-LTS-6)
#         Earlier versions probably work.
#       * Since certificates were generated by Sectigo with ASN1 OID
#         name (secp384r1) rather than the OID value (1.3.132.0.34), Java
#         can't seem to read it.
#         Confer: https://github.com/frohoff/jdk8u-jdk/blob/da0da73ab82ed714dc5be94acd2f0d00fbdfe2e9/src/share/classes/sun/security/ec/ECParameters.java#L138-L150
#         and error:
#            Caused by: java.io.IOException: Only named ECParameters supported
#                    at java.base/sun.security.util.ECParameters.engineInit(ECParameters.java:148)
#                    at java.base/java.security.AlgorithmParameters.init(AlgorithmParameters.java:311)
#                    at java.base/sun.security.util.ECUtil.getECParameterSpec(ECUtil.java:189)
#                    at jdk.crypto.cryptoki/sun.security.pkcs11.P11KeyStore.loadPkey(P11KeyStore.java:1374)
#                    ... 6 more
signingtool=osslsigncode

# Set HERE to this contributors/ directory, and DIRSEP to platform dir separator
HERE=$(dirname "$0")
HERE=$(cd "$HERE" && pwd)
if [ -x /usr/bin/cygpath ]; then
    HERE_NATIVE=$(/usr/bin/cygpath -aw "$HERE")
    DIRSEP="\\"
else
    HERE_NATIVE=$HERE
    DIRSEP="/"
fi

# Clone from crossplatform-functions.sh create_workdir()
my_create_workdir() {
    # Our use of mktemp needs to be portable; docs at:
    # * BSD: https://www.freebsd.org/cgi/man.cgi?query=mktemp&sektion=1
    # * GNU: https://www.gnu.org/software/autogen/mktemp.html
    if [ -n "${_CS_DARWIN_USER_TEMP_DIR:-}" ]; then # macOS (see `man mktemp`)
        make_workdir_DEFAULT="$_CS_DARWIN_USER_TEMP_DIR"
    elif [ -n "${TMPDIR:-}" ]; then # macOS (see `man mktemp`)
        make_workdir_DEFAULT=$(printf "%s" "$TMPDIR" | PATH=/usr/bin:/bin sed 's#/$##') # remove trailing slash on macOS
    elif [ -n "${TMP:-}" ]; then # MSYS2 (Windows), Linux
        make_workdir_DEFAULT="$TMP"
    else
        make_workdir_DEFAULT="/tmp"
    fi
    DKML_TMP_PARENTDIR="${DKML_TMP_PARENTDIR:-$make_workdir_DEFAULT}"
    [ ! -e "$DKML_TMP_PARENTDIR" ] && install -d "$DKML_TMP_PARENTDIR"
    WORK=$(PATH=/usr/bin:/bin mktemp -d "$DKML_TMP_PARENTDIR"/dkmlw.XXXXX)
    install -d "$WORK"
}

# Set a safe WORK dir
DKML_TMP_PARENTDIR='' my_create_workdir
trap 'PATH=/usr/bin:/bin rm -rf "$WORK"' EXIT

# Set file paths that need privacy from different users on the machine
pinfile="$WORK/yubikey.pin.txt"
if [ -x /usr/bin/cygpath ]; then
    pinfile_native=$(/usr/bin/cygpath -aw "$pinfile")
else
    pinfile_native=$pinfile
fi

# Everything will be done in WORK
cd "$WORK"

# Set YUBICOBIN to where PIV Tool is located
if [ -x /usr/bin/cygpath ]; then
    YUBICOBIN_W32="$(cygpath -wF 38)"'\Yubico\Yubico PIV Tool\bin'
    YUBICOBIN_UNIX=$(cygpath -a "$YUBICOBIN_W32")
    if [ ! -d "$YUBICOBIN_UNIX" ]; then
        printf "FATAL: You need to download and install Yubico PIV Tool from https://developers.yubico.com/yubico-piv-tool/Releases/\n" >&2
        exit 117
    fi
else
    printf "FATAL: Only Windows is supported right now\n" >&2
    exit 117
fi

finish_progress() {
    printf -- "\n╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n" >&2
}
progress() {
    progress_COUNT=${progress_COUNT:-1}
    progress_NOW=$(date -u +%Y-%m-%dT%H:%M:%SZ)
    if [ "$progress_COUNT" -gt 1 ]; then
        finish_progress
    fi
    printf -- "╭──────── %02d. %s | %70s ────────╮\n\n" \
        "$progress_COUNT" \
        "$progress_NOW" \
        "$*" >&2
    progress_COUNT=$(( progress_COUNT + 1 ))
}

# Get full crossplatform-functions.sh
progress "Getting crossplatform-functions.sh from dkml-runtime-common"
install -d drc
git -C drc init
git -C drc remote add origin https://github.com/diskuv/dkml-runtime-common.git
#   5f4e933f0a5da2cad6c24d353c4a13faeec2f3ed is tag v0.4.0-prerel90
git -C drc fetch --depth 1 origin 5f4e933f0a5da2cad6c24d353c4a13faeec2f3ed
git -C drc -c advice.detachedHead=false checkout FETCH_HEAD

# Import the functions
#   shellcheck disable=1091
. drc/unix/crossplatform-functions.sh

# Sign the release
progress "Signing the release"
askpin() { # only used by sign_with_jsign()
    read -rsp 'Yubikey PIN: ' PINCODE
    printf "%s" "$PINCODE" > "$pinfile"
}
runjava() { # only used by sign_with_jsign()
    if ! java --version 2>/dev/null >/dev/null; then
        printf "FATAL: Java has not been installed, or it is not in your PATH.\n" >&2
        exit 117
    fi
    # Test if Java is recent enough to support modules.
    if java --add-exports jdk.crypto.cryptoki/sun.security.pkcs11=ALL-UNNAMED --version 2>/dev/null >/dev/null; then
        #   Avoid:
        #        Exception in thread "main" java.lang.IllegalAccessError: class net.jsign.YubiKey (in unnamed module @0x4769b07b) cannot access class sun.security.pkcs11.wrapper.PKCS11 (in module jdk.crypto.cryptoki) because module jdk.crypto.cryptoki does not export sun.security.pkcs11.wrapper to unnamed module @0x4769b07b
        #                at net.jsign.YubiKey.getTokenSlot(YubiKey.java:76)
        #                at net.jsign.YubiKey.getSunPKCS11Configuration(YubiKey.java:60)
        #                at net.jsign.YubiKey.getProvider(YubiKey.java:44)
        #                at net.jsign.SignerHelper.build(SignerHelper.java:361)
        #                at net.jsign.SignerHelper.sign(SignerHelper.java:562)
        #                at net.jsign.JsignCLI.execute(JsignCLI.java:117)
        #                at net.jsign.JsignCLI.main(JsignCLI.java:40)
        #   by using https://github.com/intoolswetrust/jsignpdf/issues/70#issuecomment-990144863
        java \
            --add-exports jdk.crypto.cryptoki/sun.security.pkcs11=ALL-UNNAMED \
            --add-exports jdk.crypto.cryptoki/sun.security.pkcs11.wrapper=ALL-UNNAMED \
            --add-opens java.base/java.security=ALL-UNNAMED \
            --add-exports java.base/sun.security.action=ALL-UNNAMED \
            --add-exports java.base/sun.security.rsa=ALL-UNNAMED \
            --add-opens java.base/sun.security.util=ALL-UNNAMED \
            "$@"
    else
        java "$@"
    fi
}
sign_with_jsign() {
    sign_with_jsign_INFILE=$1
    shift

    # Get jsign
    progress "Getting jsign"
    install -d jsign
    downloadfile \
        https://github.com/ebourg/jsign/releases/download/4.1/jsign-4.1.jar \
        jsign/jsign.jar \
        4dddbc9e56bd6e15934122f16ce652f07d2110530418196898c31600e44109b6

    # Copy input locally because file will be mutated
    sign_with_jsign_BASENAME=$(basename "$sign_with_jsign_INFILE")
    install "$sign_with_jsign_INFILE" "$sign_with_jsign_BASENAME"

    #   Create pkcs11 configuration.
    #       Confer: https://docs.oracle.com/javase/8/docs/technotes/guides/security/p11guide.html#Config
    pkcs11cfg="$WORK/pkcs11.cfg"
    if [ -x /usr/bin/cygpath ]; then
        pkcs11cfg_native=$(/usr/bin/cygpath -aw "$pkcs11cfg")
    else
        pkcs11cfg_native="$pkcs11cfg"
    fi
    cat > "$pkcs11cfg" <<EOF
name = DiskuvSigner
library = $YUBICOBIN_W32\\libykcs11.dll
# PIV slot 9c is pkcs11 slot 2. Confer: https://developers.yubico.com/yubico-piv-tool/YKCS11/
slot = 2
showInfo = true
EOF

    # Ask for Yubikey PIN. Place in $pinfile_native
    askpin

    PATH="$YUBICOBIN_UNIX:$PATH" runjava -Djava.security.debug=sunpkcs11 -Djava.security.debug=pkcs11keystore \
        -jar jsign/jsign.jar \
        --keystore "$pkcs11cfg_native" \
        --storetype YUBIKEY \
        --storepass "file:$pinfile_native" \
        --certfile "${HERE_NATIVE}${DIRSEP}full-chain-ec.p7.pem" \
        "$sign_with_jsign_BASENAME"
}
sign_with_osslsigncode() {
    sign_with_osslsigncode_INFILE=$1
    shift

    if [ -x /usr/bin/cygpath ]; then
        sign_with_osslsigncode_INFILE_NATIVE=$(/usr/bin/cygpath -aw "$sign_with_osslsigncode_INFILE")
    else
        sign_with_osslsigncode_INFILE_NATIVE="$sign_with_osslsigncode_INFILE"
    fi
    sign_with_osslsigncode_BASENAME=$(basename "$sign_with_osslsigncode_INFILE")

    # Get libp11 DLLs
    progress "Getting libp11 DLLs"
    install -d libp11
    downloadfile \
        https://github.com/OpenSC/libp11/releases/download/libp11-0.4.11/libp11-0.4.11-windows.zip \
        libp11/libp11.zip \
        ae69d155c689de3b98b581036c9bb44e9e7f9033432d6d70a972da649ade4cd2
    unzip libp11/libp11.zip -d libp11
    ls -l libp11/libp11-0.4.11-windows/64bit/pkcs11.dll
    pkcs11dll=libp11/libp11-0.4.11-windows/64bit/pkcs11.dll
    if [ -x /usr/bin/cygpath ]; then
        pkcs11dll_mixed=$(/usr/bin/cygpath -am "$pkcs11dll")
    else
        pkcs11dll_mixed="$pkcs11dll"
    fi

    # Install osslsigncode
    progress "Installing osslsigncode"
    if [ -x /usr/bin/pacman ] && is_msys2_msys_build_machine; then
        pacman -S --needed --noconfirm mingw-w64-clang-x86_64-osslsigncode
    fi

    # Install p11tool
    progress "Installing GnuTLS p11tool"
    if [ -x /usr/bin/pacman ] && is_msys2_msys_build_machine; then
        pacman -S --needed --noconfirm mingw-w64-clang-x86_64-gnutls
    fi

    # Serial number
    progress "Finding serial number for Yubikey"
    PATH="$YUBICOBIN_UNIX:$PATH" yubico-piv-tool -a status | tee pivstatus.txt
    SERIALNUM=$(awk 'BEGIN{FS=":"} $1=="Serial Number" {print $2}' pivstatus.txt | sed 's/[^0-9]//g')
    if [ -z "$SERIALNUM" ]; then
        printf "FATAL: No Yubikey was found. Have you inserted it?" >&2
        exit 117
    fi
    SERIALCOUNT=$(awk 'BEGIN{FS=":"} $1=="Serial Number" {count=count+1} END{print count}' pivstatus.txt)
    if [ "$SERIALCOUNT" != "1" ]; then
        printf "FATAL: More than one Yubikey was found. Please remove all but one." >&2
        exit 117
    fi
    printf "\nDetected Yubikey.\n"
    printf "\nSerial Number:\n\t%s\n" "$SERIALNUM" >&2

    # URL for Digital Signature (PIV slot 9c)
    #   Theoretically we could scrape the following instead of the brittle formulation of the URL:
    #       p11tool --provider "$(cygpath -wF 38)"'\Yubico\Yubico PIV Tool\bin\libykcs11.dll' --list-privkeys --login
    #   But for now the URL matches the specific Yubikey model used by Diskuv
    DIGITALSIGNCERT="pkcs11:model=YubiKey%20YK5;manufacturer=Yubico%20%28www.yubico.com%29;serial=$SERIALNUM;token=YubiKey%20PIV%20%23$SERIALNUM;id=%02;object=Private%20key%20for%20Digital%20Signature;type=private"
    printf "PKCS url:\n\t%s\n" "$DIGITALSIGNCERT" >&2

    # Actually sign
    progress "Sign executable"
    PATH="$YUBICOBIN_UNIX:$PATH" osslsigncode sign \
        -verbose \
        -comm \
        -h sha384 \
        -pkcs11engine "$pkcs11dll_mixed" \
        -pkcs11module "$YUBICOBIN_W32\\libykcs11.dll" \
        -pkcs11cert "$DIGITALSIGNCERT" \
        -in "$sign_with_osslsigncode_INFILE_NATIVE" \
        -out "$sign_with_osslsigncode_BASENAME" \
        -t http://timestamp.sectigo.com
}

#   Sign!
#       TODO: Get real binary from GitHub
case "$signingtool" in
    jsign) sign_with_jsign               /clang64/bin/zstd.exe ;;
    osslsigncode) sign_with_osslsigncode /clang64/bin/zstd.exe ;;
esac

rm -f "$pinfile"

# Done
finish_progress
