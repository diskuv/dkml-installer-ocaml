# setup-dkml
#   Short form: sd4

# Any GitHub Job that includes this action must be in a strategy matrix.
# The matrix variables must include:
# - gh_os: windows-2019
#   abi_pattern: win32-windows_x86
#   dkml_host_abi: windows_x86

name: pre-dkml
author: Diskuv, Inc.
description: Setup before building OCaml native executables for Windows

inputs:
  CACHE_PREFIX:
    description: The prefix of the cache keys.
    required: false
    default: "v1"
  OCAML_COMPILER:
    description: "The version of the OCaml compiler, as tagged by the https://github.com/diskuv/dkml-base-compiler repository. If not specified the latest compiler, or the version associated with the 'dkml-compiler' input, is used. Currently only 4.12.1 is supported"
    required: false
  DKML_COMPILER:
    description: "Git branch, tag or commit for dkml-compiler. However if OCAML_COMPILER is specified the 'dkml-base-compiler' version is taken from OCAML_COMPILER."
    required: false
    default: "" # "@repository@" = Opam ; "" = latest from default branch of git clone
  CONF_DKML_CROSS_TOOLCHAIN:
    description: "Git branch, tag or commit for conf-dkml-cross-toolchain"
    required: false
    default: "@repository@" # "@repository@" = Opam ; "" = latest from default branch of git clone
  OCAML_OPAM_REPOSITORY:
    description: "Git branch, tag or commit for ocaml/opam-repository.git"
    required: false
    default: "" # DEFAULT_OCAML_OPAM_REPOSITORY_TAG is used as default for empty strings
  DISKUV_OPAM_REPOSITORY:
    description: "Git branch, tag or commit for diskuv-opam-repository"
    required: false
    default: "" # DEFAULT_DISKUV_OPAM_REPOSITORY_TAG is used as default for empty strings
  VERBOSE:
    description: "Turn on verbose logging"
    required: false
    default: 'false'
  SKIP_OPAM_MODIFICATIONS:
    description: "Disable the creation and updating of the opam root"
    required: false
    default: 'true'
  PRIMARY_SWITCH_SKIP_INSTALL:
    description: "Disable install of dkml-base-compiler in 'dkml' switch"
    required: false
    default: 'false'
  SECONDARY_SWITCH:
    description: "Turn on secondary 'two' switch"
    required: false
    default: 'false'

runs:
  using: "composite"

  steps:
    - name: Full matrix variables
      shell: bash # bash on Windows is Git Bash (an non-upgradable MSYS2 system)
      # Every matrix variable lookup in this Action should use the output of this step. Even
      # the matrix variables that the user must specify (ex. dkml_host_abi) should be
      # referenced using [steps.full_matrix_vars.outputs.dkml_host_abi] rather than
      # [matrix.dkml_host_abi] so that there is a single place to edit for variable changes.
      id: full_matrix_vars
      run: |
        # Select correct Windows matrix variables
        case "${{ matrix.dkml_host_abi }}" in
        
        windows_x86)
          dkml_host_os='windows';
          opam_root_cacheable='D:/.opam';
          abi_pattern='win32-windows_x86';
          gh_os='windows-2019';
          gh_unix_shell='msys2 {0}';
          msys2_system='MINGW32';
          msys2_packages='mingw-w64-i686-pkg-config';
          exe_ext='.exe';
          dkml_host_abi='windows_x86';
          dkml_target_abi='windows_x86';
          opam_root='D:/.opam';
          vsstudio_hostarch='x64';
          vsstudio_arch='x86' ;;
          
        windows_x86_64)
          dkml_host_os='windows';
          opam_root_cacheable='D:/.opam';
          abi_pattern='win32-windows_x86_64';
          gh_os='windows-2019';
          gh_unix_shell='msys2 {0}';
          msys2_system='CLANG64';
          msys2_packages='mingw-w64-clang-x86_64-pkg-config';
          exe_ext='.exe';
          dkml_host_abi='windows_x86_64';
          dkml_target_abi='windows_x86_64';
          opam_root='D:/.opam';
          vsstudio_hostarch='x64';
          vsstudio_arch='x64' ;;
          
        *)  echo "FATAL: Unsupported dkml_host_abi=$dkml_host_abi in Windows action.yml"; exit 107 ;;
        esac

        add() {
          echo "$1=$2" | tee -a $GITHUB_OUTPUT | tee -a $GITHUB_ENV
        }

        add dkml_host_abi "$dkml_host_abi"
        add dkml_target_abi "$dkml_target_abi"
        add abi_pattern "$abi_pattern"
        add opam_root "$opam_root"
        add opam_root_cacheable "$opam_root_cacheable"
        add exe_ext "${exe_ext:-}"
        add ocaml_options "${ocaml_options:-}"

        add msys2_system "${msys2_system:-}"
        add msys2_packages "${msys2_packages:-}"
        add vsstudio_hostarch "${vsstudio_hostarch:-}"
        add vsstudio_arch "${vsstudio_arch:-}"
        add vsstudio_dir "${vsstudio_dir:-}"
        add vsstudio_vcvarsver "${vsstudio_vcvarsver:-}"
        add vsstudio_winsdkver "${vsstudio_winsdkver:-}"
        add vsstudio_msvspreference "${vsstudio_msvspreference:-}"
        add vsstudio_cmakegenerator "${vsstudio_cmakegenerator:-}"

    - name: Install MSYS2 (Windows)
      uses: msys2/setup-msys2@v2
      with:
        msystem: "${{ steps.full_matrix_vars.outputs.msys2_system }}"
        update: true
        install: >-
          ${{ steps.full_matrix_vars.outputs.msys2_packages }}
          wget
          make
          rsync
          diffutils
          patch
          unzip
          git
          tar
          xz

    - name: Uninstall MSYS2 conflicting executables (Windows)
      # link.exe interferes with MSVC's link.exe
      run: rm -vf /usr/bin/link.exe
      shell: msys2 {0}

    - name: Write POSIX shell and AWK scripts
      shell: bash
      run: |
        install -d .ci/sd4

        cat > .ci/sd4/common-values.sh <<'end_of_script'
        #!/bin/sh

        # ------------------------ Log Formatting ------------------------

        TXT_SECTION="\e[94m" # bright blue
        TXT_CLEAR="\e[0m"

        if [ "${GITLAB_CI:-}" = "true" ]; then
            # https://docs.gitlab.com/ee/ci/jobs/#expand-and-collapse-job-log-sections
            print_section_start() {
                print_section_start_NAME=$1
                shift
                printf "\e[0Ksection_start:%s:%s[collapsed=true]\r\e[0K" \
                    "$(date +%s)" \
                    "$print_section_start_NAME"
            }
            print_section_end() {
                print_section_end_NAME=$1
                shift
                printf "\e[0Ksection_end:%s:%s\r\e[0K\n" \
                    "$(date +%s)" \
                    "$print_section_end_NAME"
            }
        elif [ -n "${GITHUB_ENV:-}" ]; then
            # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines
            print_section_start() {
                print_section_start_NAME=$1
                shift
                printf "::group::"
            }
            print_section_end() {
                print_section_end_NAME=$1
                shift
                printf "::endgroup::\n"
            }
        else
            print_section_start() {
                print_section_start_NAME=$1
                shift
            }
            print_section_end() {
                print_section_end_NAME=$1
                shift
            }
        fi

        section_begin() {
            # https://docs.gitlab.com/ee/ci/yaml/script.html#add-color-codes-to-script-output
            section_NAME=$1
            shift
            section_HEADER=$1
            shift
            print_section_start "$section_NAME"
            printf "${TXT_SECTION}%s${TXT_CLEAR}\n" "$section_HEADER"
        }

        section_end() {
            section_NAME=$1
            shift
            print_section_end "$section_NAME"
        }

        # ------------------- Other Functions -----------------

        transfer_dir() {
            transfer_dir_SRC=$1
            shift
            transfer_dir_DST=$1
            shift
            # Remove the destination directory completely, but make sure the parent of the
            # destination directory exists so `mv` will work
            install -d "$transfer_dir_DST"
            rm -rf "$transfer_dir_DST"
            # Move
            if [ -d "$transfer_dir_SRC" ]; then
                mv "$transfer_dir_SRC" "$transfer_dir_DST"
            fi
        }

        # Set TEMP variable which is used, among other things, for OCaml's
        # [Filename.temp_dir_name] on Win32, and by with-dkml.exe on Windows
        export_temp_for_windows() {
            if [ -x /usr/bin/cygpath ]; then
                if [ -n "${RUNNER_TEMP:-}" ]; then
                    # GitHub Actions
                    TEMP=$(cygpath -am "$RUNNER_TEMP")
                else
                    # GitLab CI/CD or desktop
                    install -d .ci/sd4/tmp
                    TEMP=$(cygpath -am ".ci/sd4/tmp")
                fi
                export TEMP
            fi
        }

        # Fixup opam_root on Windows to be mixed case.
        # On input the following variables must be present:
        # - opam_root
        # - opam_root_cacheable
        # On output the input variables will be modified _and_ the
        # following variables will be available:
        # - original_opam_root
        # - original_opam_root_cacheable
        # - unix_opam_root
        # - unix_opam_root_cacheable
        fixup_opam_root() {
            # shellcheck disable=SC2034
            original_opam_root=$opam_root
            # shellcheck disable=SC2034
            original_opam_root_cacheable=$opam_root_cacheable
            if [ -x /usr/bin/cygpath ]; then
                opam_root=$(/usr/bin/cygpath -m "$opam_root")
                opam_root_cacheable=$(/usr/bin/cygpath -m "$opam_root_cacheable")
                unix_opam_root=$(/usr/bin/cygpath -u "$opam_root")
                unix_opam_root_cacheable=$(/usr/bin/cygpath -u "$opam_root_cacheable")
            else
                # shellcheck disable=SC2034
                unix_opam_root=$opam_root
                # shellcheck disable=SC2034
                unix_opam_root_cacheable=$opam_root_cacheable
            fi
        }
        end_of_script

        cat > .ci/sd4/run-checkout-code.sh <<'end_of_script'
        #!/bin/sh

        # ================
        # checkout-code.sh
        # ================
        #
        # Checkouts all of the git source code.
        #
        # This should be done outside of
        # dockcross (used by Linux) since a Docker-in-Docker container can have
        # difficulties doing a git checkout (the Git credentials for any private
        # repositories are likely not present). We don't care about any private
        # repositories for DkML but any code that extends this (ex. DKSDK) may
        # need to use private repositories.

        set -euf

        setup_WORKSPACE_VARNAME=$1
        shift
        setup_WORKSPACE=$1
        shift

        if [ -x /usr/bin/cygpath ]; then
            setup_WORKSPACE=$(/usr/bin/cygpath -au "$setup_WORKSPACE")
        fi

        # ------------------------ Functions ------------------------

        # shellcheck source=./common-values.sh
        . .ci/sd4/common-values.sh

        do_git() {
            if [ -z "${GIT_LOCATION:-}" ]; then
                git "$@"
            else
                PATH="$GIT_LOCATION:$PATH" git "$@"
            fi
        }

        # Disable automatic garbage collection
        git_disable_gc() {
            git_disable_gc_NAME=$1
            shift
            do_git -C ".ci/sd4/g/$git_disable_gc_NAME" config --local gc.auto 0
        }

        # Mimic the behavior of GitHub's actions/checkout@v4
        # - the plus symbol in 'git fetch ... origin +REF:refs/tags/v0.0' overrides any existing REF
        git_checkout() {
            git_checkout_NAME=$1
            shift
            git_checkout_URL=$1
            shift
            git_checkout_REF=$1
            shift

            case "$git_checkout_REF" in
              file://*)
                git_checkout_FILEURI=$(printf "%s" "$git_checkout_REF" | sed 's#^file://##')
                rm -rf ".ci/sd4/g/$git_checkout_NAME"
                cp -rp "$git_checkout_FILEURI" ".ci/sd4/g/$git_checkout_NAME" ;;
              *)
                if [ -e ".ci/sd4/g/$git_checkout_NAME" ]; then
                    git_disable_gc "$git_checkout_NAME"
                    do_git -C ".ci/sd4/g/$git_checkout_NAME" remote set-url origin "$git_checkout_URL"
                    do_git -C ".ci/sd4/g/$git_checkout_NAME" fetch --no-tags --progress --no-recurse-submodules --depth=1 origin "+${git_checkout_REF}:refs/tags/v0.0"
                else
                    install -d ".ci/sd4/g/$git_checkout_NAME"
                    do_git -C ".ci/sd4/g/$git_checkout_NAME" -c init.defaultBranch=main init
                    git_disable_gc "$git_checkout_NAME"
                    do_git -C ".ci/sd4/g/$git_checkout_NAME" remote add origin "$git_checkout_URL"
                    do_git -C ".ci/sd4/g/$git_checkout_NAME" fetch --no-tags --prune --progress --no-recurse-submodules --depth=1 origin "+${git_checkout_REF}:refs/tags/v0.0"
                fi
                do_git -C ".ci/sd4/g/$git_checkout_NAME" -c advice.detachedHead=false checkout --progress --force refs/tags/v0.0
                do_git -C ".ci/sd4/g/$git_checkout_NAME" log -1 --format='%H' ;;
            esac
        }

        # ---------------------------------------------------------------------

        section_begin checkout-info "Summary: code checkout"

        PIN_DKML_RUNTIME_DISTRIBUTION=${PIN_DKML_RUNTIME_DISTRIBUTION:-}
        TAG_DKML_RUNTIME_DISTRIBUTION=${TAG_DKML_RUNTIME_DISTRIBUTION:-$PIN_DKML_RUNTIME_DISTRIBUTION}
        DKML_RUNTIME_DISTRIBUTION=${DKML_RUNTIME_DISTRIBUTION:-$TAG_DKML_RUNTIME_DISTRIBUTION}

        # shellcheck disable=SC2154
        echo "
        ================
        checkout-code.sh
        ================
        .
        ---------
        Arguments
        ---------
        WORKSPACE_VARNAME=$setup_WORKSPACE_VARNAME
        WORKSPACE=$setup_WORKSPACE
        .
        ------
        Inputs
        ------
        VERBOSE=${VERBOSE:-}
        .
        -------
        Context
        -------
        GIT_LOCATION=${GIT_LOCATION:-}
        .
        ------
        Matrix
        ------
        dkml_host_abi=$dkml_host_abi
        .
        ---------
        Constants
        ---------
        PIN_DKML_RUNTIME_DISTRIBUTION=${PIN_DKML_RUNTIME_DISTRIBUTION}
        TAG_DKML_RUNTIME_DISTRIBUTION=${TAG_DKML_RUNTIME_DISTRIBUTION}
        DKML_RUNTIME_DISTRIBUTION=${DKML_RUNTIME_DISTRIBUTION}
        .
        "

        section_end checkout-info

        install -d .ci/sd4/g

        # dkml-runtime-distribution

        #   For 'Diagnose Visual Studio environment variables (Windows)' we need dkml-runtime-distribution
        #   so that 'Import-Module Machine' and 'Get-VSSetupInstance' can be run.
        #   More importantly, for 'Locate Visual Studio (Windows)' we need dkml-runtime-distribution's
        #   'Get-CompatibleVisualStudios' and 'Get-VisualStudioProperties'.
        case "$dkml_host_abi" in
        windows_*)
            section_begin checkout-dkml-runtime-distribution 'Checkout dkml-runtime-distribution'
            git_checkout dkml-runtime-distribution https://github.com/diskuv/dkml-runtime-distribution.git "$DKML_RUNTIME_DISTRIBUTION"
            section_end checkout-dkml-runtime-distribution
            ;;
        esac

        end_of_script

        cat > .ci/sd4/run-setup-dkml.sh <<'end_of_script'
        #!/bin/sh
        set -euf

        setup_WORKSPACE_VARNAME=$1
        shift
        setup_WORKSPACE=$1
        shift

        if [ -x /usr/bin/cygpath ]; then
            setup_WORKSPACE=$(/usr/bin/cygpath -au "$setup_WORKSPACE")
        fi

        # ------------------ Variables and functions ------------------------

        # shellcheck source=./common-values.sh
        . .ci/sd4/common-values.sh

        if [ "${VERBOSE:-}" = "true" ]; then
            do_tar_rf() {
                tar rvf "$@"
            }
        else
            do_tar_rf() {
                tar rf "$@"
            }
        fi

        # Make the standard input work as an OCaml string.
        # This currently only escapes backslashes and double quotes.
        escape_arg_as_ocaml_string() {
            escape_arg_as_ocaml_string_ARG=$1
            shift
            printf "%s" "$escape_arg_as_ocaml_string_ARG" | sed 's#\\#\\\\#g; s#"#\\"#g;'
        }

        # Fixup opam_root on Windows to be mixed case. Set original_* and unix_* as well.
        fixup_opam_root

        # Set TEMP variable for Windows
        export_temp_for_windows

        # Load VS studio environment
        if [ -e .ci/sd4/vsenv.sh ]; then
            # shellcheck disable=SC1091
            . .ci/sd4/vsenv.sh
        fi

        # -------------------------------------------------------------------

        docker_image_id=
        docker_fqin_preusername= # fully qualified image name (hostname[:port]/username/reponame[:tag]), the parts before the username (hostname[:port]/)
        if [ -n "${docker_registry:-}" ]; then
            docker_fqin_preusername="$docker_registry/"
        fi

        # Extend dockcross. https://github.com/dockcross/dockcross#how-to-extend-dockcross-images
        dockcross_cli_image_args=
        if [ "${in_docker:-}" = "true" ] && [ -n "${dockcross_image:-}" ]; then
            echo "Doing docker build"
            section_begin dockcross-build "Summary: docker build --quiet --tag ${docker_fqin_preusername}dkml-workflows/dockcross"

            install -d .ci/sd4/docker-image
            #   Since GitLab CI limits environment variables to 255 characters, if you need to exceed that there are five (5)
            #   variations of `dockcross_packages_apt` and `dockcross_packages_yum` to spread the packages over.
            printf "FROM %s\nENV DEFAULT_DOCKCROSS_IMAGE %sdkml-workflows/dockcross:latest\nRUN if command -v apt-get; then apt-get update -y && apt-get install -y rsync %s %s %s %s %s && rm -rf /var/lib/apt/lists/*; fi\nRUN if command -v yum; then yum update -y && yum install -y rsync %s %s %s %s %s && yum clean all && rm -rf /var/cache/yum; fi; %s\n" \
                "${dockcross_image:-}" "${docker_fqin_preusername}" \
                "${dockcross_packages_apt:-}" "${dockcross_packages_apt2:-}" "${dockcross_packages_apt3:-}" "${dockcross_packages_apt4:-}" "${dockcross_packages_apt5:-}" \
                "${dockcross_packages_yum:-}" "${dockcross_packages_yum2:-}" "${dockcross_packages_yum3:-}" "${dockcross_packages_yum4:-}" "${dockcross_packages_yum5:-}" \
                "${docker_assemble_command:-true}" \
                |tee .ci/sd4/docker-image/Dockerfile
            docker build --quiet --tag "${docker_fqin_preusername}dkml-workflows/dockcross:latest" .ci/sd4/docker-image

            # Save image id to re-use for all remaining invocations
            docker images --format "{{.ID}} {{.CreatedAt}}" | sort -rk 2 | awk 'NR==1{print $1}' | tee .ci/sd4/docker-image-id
            docker_image_id=$(cat .ci/sd4/docker-image-id)
            dockcross_cli_image_args="--image $docker_image_id"

            section_end dockcross-build
        fi

        # Extend docker_image.
        if [ "${in_docker:-}" = "true" ] && [ -n "${docker_image:-}" ]; then
            echo "Doing docker build"
            section_begin docker-build "Summary: docker build --quiet --tag ${docker_fqin_preusername}dkml-workflows/docker"

            install -d .ci/sd4/docker-image
            printf "FROM %s\nRUN %s\n" "$docker_image" "${docker_assemble_command:-true}" \
                |tee .ci/sd4/docker-image/Dockerfile
            docker build --quiet --tag "${docker_fqin_preusername}dkml-workflows/docker:latest" .ci/sd4/docker-image

            # Save image id to re-use for all remaining invocations
            docker images --format "{{.ID}} {{.CreatedAt}}" | sort -rk 2 | awk 'NR==1{print $1}' | tee .ci/sd4/docker-image-id
            docker_image_id=$(cat .ci/sd4/docker-image-id)

            section_end docker-build
        fi

        # -------------------------------------------------------------------

        section_begin setup-info "Summary: setup-dkml"

        SKIP_OPAM_MODIFICATIONS=${SKIP_OPAM_MODIFICATIONS:-false} # default is false

        if [ "$SKIP_OPAM_MODIFICATIONS" = "false" ]; then
            if [ -z "${dkml_target_abi:-}" ]; then
                echo "dkml_target_abi environment variable is required unless SKIP_OPAM_MODIFICATIONS=true" >&2
                exit 2
            fi
        fi

        # shellcheck disable=SC2154
        echo "
        =============
        setup-dkml.sh
        =============
        .
        ---------
        Arguments
        ---------
        WORKSPACE_VARNAME=$setup_WORKSPACE_VARNAME
        WORKSPACE=$setup_WORKSPACE
        .
        ------
        Inputs
        ------
        DISKUV_OPAM_REPOSITORY=${DISKUV_OPAM_REPOSITORY:-}
        OCAML_OPAM_REPOSITORY=${OCAML_OPAM_REPOSITORY:-}
        DKML_COMPILER=${DKML_COMPILER:-}
        OCAML_COMPILER=${OCAML_COMPILER:-}
        CONF_DKML_CROSS_TOOLCHAIN=${CONF_DKML_CROSS_TOOLCHAIN:-}
        SKIP_OPAM_MODIFICATIONS=${SKIP_OPAM_MODIFICATIONS:-}
        SECONDARY_SWITCH=${SECONDARY_SWITCH:-}
        PRIMARY_SWITCH_SKIP_INSTALL=${PRIMARY_SWITCH_SKIP_INSTALL:-}
        MANYLINUX=${MANYLINUX:-}
        DKML_HOME=${DKML_HOME:-}
        VERBOSE=${VERBOSE:-}
        .
        ----------------------
        DkML Release Constants
        ----------------------
        DKML_VERSION=$DKML_VERSION
        DEFAULT_DISKUV_OPAM_REPOSITORY_TAG=$DEFAULT_DISKUV_OPAM_REPOSITORY_TAG
        DEFAULT_OCAML_OPAM_REPOSITORY_TAG=$DEFAULT_OCAML_OPAM_REPOSITORY_TAG
        DEFAULT_DKML_COMPILER=$DEFAULT_DKML_COMPILER
        BOOTSTRAP_OPAM_VERSION=$BOOTSTRAP_OPAM_VERSION
        .
        -------
        Context
        -------
        PC_PROJECT_DIR=${PC_PROJECT_DIR:-}
        GIT_LOCATION=${GIT_LOCATION:-}
        .
        ------
        Matrix
        ------
        dkml_host_abi=$dkml_host_abi
        dkml_target_abi=${dkml_target_abi:-}
        abi_pattern=$abi_pattern
        opam_root=${opam_root}
        opam_root_cacheable=${opam_root_cacheable}
        original_opam_root=${original_opam_root}
        original_opam_root_cacheable=${original_opam_root_cacheable}
        unix_opam_root=${unix_opam_root}
        unix_opam_root_cacheable=${unix_opam_root_cacheable}
        docker_registry=${docker_registry:-}
        in_docker=${in_docker:-}
        dockcross_image=${dockcross_image:-}
        dockcross_run_extra_args=${dockcross_run_extra_args:-}
        docker_image=${docker_image:-}
        docker_runner=${docker_runner:-}
        ocaml_options=${ocaml_options:-}
        .
        ----
        Pins
        ----
        "
        set | grep ^PIN_
        echo ".
        "
        case "$dkml_host_abi" in
        windows_*)
            # shellcheck disable=SC2153
            echo "
        -------------
        Visual Studio
        -------------
        VS_DIR=$VS_DIR
        VS_VCVARSVER=$VS_VCVARSVER
        VS_WINSDKVER=$VS_WINSDKVER
        VS_MSVSPREFERENCE=$VS_MSVSPREFERENCE
        VS_CMAKEGENERATOR=$VS_CMAKEGENERATOR
        .
        "
            ;;
        esac
        section_end setup-info

        do_bootstrap() {
            install -d .ci/sd4/bs
            cd .ci/sd4/bs

            if [ ! -e stamp ] || [ "$(cat stamp)" != "${BOOTSTRAP_OPAM_VERSION}${dkml_host_abi}" ]; then
                echo 'Bootstrap opam from dkml-component-opam release ...'
                if command -v curl > /dev/null 2> /dev/null; then
                    curl -s -L -o opam.tar.gz "https://github.com/diskuv/dkml-component-opam/releases/download/${BOOTSTRAP_OPAM_VERSION}/dkml-component-staging-opam.tar.gz"
                else
                    wget -q -O opam.tar.gz "https://github.com/diskuv/dkml-component-opam/releases/download/${BOOTSTRAP_OPAM_VERSION}/dkml-component-staging-opam.tar.gz"
                fi
                tar tfz opam.tar.gz
                tar xfz opam.tar.gz "./staging-files/${dkml_host_abi}/"
                rm -rf bin/
                mv "staging-files/${dkml_host_abi}/bin" .
                rm -rf "${abi_pattern}"
                printf "%s" "${BOOTSTRAP_OPAM_VERSION}${dkml_host_abi}" >stamp
            fi

            rm -f opam.tar.gz
            cd ../../..
        }
        section_begin bootstrap-opam 'Bootstrap opam'
        do_bootstrap
        section_end bootstrap-opam

        # Start environment distribution tarball
        #   We use .tar rather than .tar.gz/.tar.bz2 because we can repeatedly add to an uncompressed .tar. But we need to
        #   start with an empty tarball since some tar programs will only add ('tar rf xyz.tar') to an existing .tar.
        install -d .ci/sd4/dist
        tar cf .ci/sd4/dist/run-with-env.tar -T /dev/null

        do_get_dockcross() {
            if [ "${in_docker:-}" = "true" ] && [ -n "${dockcross_image:-}" ]; then
                # The dockcross script is super-slow
                section_begin get-dockcross 'Get dockcross binary (ManyLinux)'
                install -d .ci/sd4
                #   shellcheck disable=SC2086
                docker run ${dockcross_run_extra_args:-} --rm "${docker_image_id}" >.ci/sd4/dockcross.gen

                # PROBLEM 1
                # ---------
                # Super-annoying stderr output from dockcross at line:
                #    tty -s && [ -z "$MSYS" ] && TTY_ARGS=-ti
                # When there is no tty, get:
                #   tty: ignoring all arguments
                #   not a tty
                # So replace 'tty -s &&' with 'false &&'
                sed 's/tty -s &&/false \&\&/' .ci/sd4/dockcross.gen >.ci/sd4/dockcross-real
                rm -f .ci/sd4/dockcross.gen
                chmod +x .ci/sd4/dockcross-real

                # PROBLEM 2
                # ---------
                # By default dockcross for ManyLinux will chown -R all python packages; super-slow (~10 seconds)!
                # Confer: https://github.com/dockcross/dockcross/blob/master/manylinux-common/pre_exec.sh
                # That kills speed for any repetitive dockcross invocation.
                #
                # BUT it is unnecessary to chown -R when the current user is root, because inside the Docker container
                # the files are already root!
                #
                # The chown -R (within pre_exec.sh) is not run when the user ids are not passed in.
                # Confer: https://github.com/dockcross/dockcross/blob/96d87416f639af0204bdd42553e4b99315ca8476/imagefiles/entrypoint.sh#L21-L53
                #
                # So explicitly call the entrypoint if root!
                if echo "${dockcross_run_extra_args:-}" | grep -q linux/386; then
                    # https://github.com/dockcross/dockcross/blob/master/linux-x86/linux32-entrypoint.sh
                    # But only when `--platform linux/386` because the container image may be overridden.
                    dockcross_entrypoint=/dockcross/linux32-entrypoint.sh
                else
                    dockcross_entrypoint=/dockcross/entrypoint.sh
                fi
                cat > .ci/sd4/dockcross <<EOF
        #!/bin/bash
        set -euf
        BUILDER_UID="\$( id -u )"
        BUILDER_GID="\$( id -g )"
        if [ "\$BUILDER_UID" = 0 ] && [ "\$BUILDER_GID" = 0 ]; then
            # ---------- Start of dockcross script snippet -------
            # Verbatim from
            # https://github.com/dockcross/dockcross/blob/96d87416f639af0204bdd42553e4b99315ca8476/imagefiles/dockcross#L175-L204
            # except 1) disabling of USER_IDS

            # Bash on Ubuntu on Windows
            UBUNTU_ON_WINDOWS=\$([ -e /proc/version ] && grep -l Microsoft /proc/version || echo "")
            # MSYS, Git Bash, etc.
            MSYS=\$([ -e /proc/version ] && grep -l MINGW /proc/version || echo "")
            # CYGWIN
            CYGWIN=\$([ -e /proc/version ] && grep -l CYGWIN /proc/version || echo "")

            #if [ -z "\$UBUNTU_ON_WINDOWS" -a -z "\$MSYS" -a "\$OCI_EXE" != "podman" ]; then
            #    USER_IDS=(-e BUILDER_UID="\$( id -u )" -e BUILDER_GID="\$( id -g )" -e BUILDER_USER="\$( id -un )" -e BUILDER_GROUP="\$( id -gn )")
            #fi

            # Change the PWD when working in Docker on Windows
            if [ -n "\$UBUNTU_ON_WINDOWS" ]; then
                WSL_ROOT="/mnt/"
                CFG_FILE=/etc/wsl.conf
                    if [ -f "\$CFG_FILE" ]; then
                            CFG_CONTENT=\$(cat \$CFG_FILE | sed -r '/[^=]+=[^=]+/!d' | sed -r 's/\s+=\s/=/g')
                            eval "\$CFG_CONTENT"
                            if [ -n "\$root" ]; then
                                    WSL_ROOT=\$root
                            fi
                    fi
                HOST_PWD=\`pwd -P\`
                HOST_PWD=\${HOST_PWD/\$WSL_ROOT//}
            elif [ -n "\$MSYS" ]; then
                HOST_PWD=\$PWD
                HOST_PWD=\${HOST_PWD/\//}
                HOST_PWD=\${HOST_PWD/\//:\/}
            elif [ -n "\$CYGWIN" ]; then
                for f in pwd readlink cygpath ; do
                    test -n "\$(type "\${f}" )" || { echo >&2 "Missing functionality (\${f}) (in cygwin)." ; exit 1 ; } ;
                done ;
                HOST_PWD="\$( cygpath -w "\$( readlink -f "\$( pwd ;)" ; )" ; )" ;
            else
                HOST_PWD=\$PWD
                [ -L \$HOST_PWD ] && HOST_PWD=\$(readlink \$HOST_PWD)
            fi

            # ---------- End of dockcross script snippet -------

            # Handle: dockcross --args "-v X:Y --platform P"
            ARGS=
            if [ "\$#" -ge 1 ] && [ "\$1" = "--args" ]; then
                shift
                ARGS=\$1
                shift
            fi

            # Handle: dockcross --args "-v X:Y --platform P" --image "..." --
            # Confer: https://github.com/dockcross/dockcross/blob/96d87416f639af0204bdd42553e4b99315ca8476/imagefiles/dockcross#L97C1-L134
            ARG_ARGS=
            ARG_IMAGE="${docker_image_id}"
            while [[ \$# != 0 ]]; do
                case \$1 in
                    --)
                        shift
                        break
                        ;;
                    --args|-a)
                        ARG_ARGS="\$2"
                        shift 2
                        ;;
                    --image|-i)
                        ARG_IMAGE="\$2"
                        shift 2
                        ;;
                    -*)
                        echo Unknown option \"\$1\" >&2
                        exit 67
                        ;;
                    *)
                        break
                        ;;
                esac
            done

            # Directly invoke entrypoint
            exec docker run --entrypoint /bin/bash \
                --rm \
                \${ARG_ARGS} \
                 -v "\$HOST_PWD":/work \
                "\${ARG_IMAGE}" ${dockcross_entrypoint} "\$@"
        else
            HERE=\$(dirname "\$0")
            HERE=\$(cd "\$HERE" && pwd)
            export OCI_EXE=docker # default to podman if available, which breaks complaining about HTTPS vs HTTP on GitHub Actions communicating to http (docker) local registry.
            exec "\$HERE/dockcross-real" "\$@"
        fi
        EOF
                chmod +x .ci/sd4/dockcross

                # Bundle for consumers of setup-dkml.yml
                do_tar_rf .ci/sd4/dist/run-with-env.tar .ci/sd4/dockcross .ci/sd4/dockcross-real

                section_end get-dockcross
            fi
        }
        do_get_dockcross

        # Get Opam Cache
        do_get_opam_cache() {
            if [ "$unix_opam_root_cacheable" = "$unix_opam_root" ]; then return; fi
            if [ ! -e "$unix_opam_root_cacheable" ]; then return; fi
            section_begin get-opam-cache "Transferring Opam cache to $original_opam_root_cacheable"
            echo Starting transfer # need some output or GitLab CI will not display the section duration
            transfer_dir "$unix_opam_root_cacheable" "$unix_opam_root"
            echo Finished transfer
            section_end get-opam-cache
        }
        do_get_opam_cache

        # Setup Opam

        do_write_opam_scripts() {
            # ---------------------
            # Empty opam repository
            # ---------------------

            install -d .ci/sd4/eor
            cat >.ci/sd4/eor/repo <<EOF
        opam-version: "2.0"
        browse: "https://opam.ocaml.org/pkg/"
        upstream: "https://github.com/ocaml/opam-repository/tree/master/"
        EOF

            # ---------------
            # Create Opam troubleshooting script
            #   Dump logs modified within the last 4 hours
            # ---------------

            cat >.ci/sd4/troubleshoot-opam.sh <<EOF
        #!/bin/sh
        set -euf
        OPAMROOT=\$1
        shift
        if find . -maxdepth 0 -mmin -240 2>/dev/null >/dev/null; then
            FINDARGS="-mmin -240" # is -mmin supported? BSD (incl. macOS), MSYS2, GNU
        else
            FINDARGS="-mtime -1" # use 1 day instead. Solaris
        fi
        printf "\n\n========= [START OF TROUBLESHOOTING] ===========\n\n" >&2
        find "\$OPAMROOT"/log -mindepth 1 -maxdepth 1 \$FINDARGS -name "*.out" ! -name "log-*.out" ! -name "ocaml-variants-*.out" | while read -r dump_on_error_LOG; do
            dump_on_error_BLOG=\$(basename "\$dump_on_error_LOG")
            printf "\n\n========= [TROUBLESHOOTING] %s ===========\n\n" "\$dump_on_error_BLOG" >&2
            awk -v BLOG="\$dump_on_error_BLOG" '{print "[" BLOG "]", \$0}' "\$dump_on_error_LOG" >&2
        done
        printf "\nScroll up to see the [TROUBLESHOOTING] logs that begin at the [START OF TROUBLESHOOTING] line\n" >&2
        EOF

            chmod +x .ci/sd4/troubleshoot-opam.sh
            do_tar_rf .ci/sd4/dist/run-with-env.tar .ci/sd4/troubleshoot-opam.sh

            # ---------------
            # Create Opam support scripts (not needed for all platforms)
            #   The PATH to find opam must work internally in setup-dkml.yml (sd4/bs/bin)
            # ---------------

            USER_ID=$(id -u)
            GROUP_ID=$(id -g)
            USER_NAME=$(id -un)
            GROUP_NAME=$(id -gn)

            case "${opam_root}" in
            /* | ?:*) # /a/b/c or C:\Windows
                validate_supports_docker() {
                    echo "Docker only supported with relative paths for the opam root, not: ${opam_root}"
                    exit 3
                }
                ;;
            *) # relative path
                validate_supports_docker() {
                    true
                }
                cat >.ci/sd4/run-in-docker <<EOF
        #!/bin/sh
        set -euf
        export PATH="/work/.ci/local/bin:/work/.ci/sd4/bs/bin:\$PATH"
        export OPAMROOT=/work/${opam_root}
        export OPAMROOTISOK=1

        # Reset environment so no conflicts with a parent Opam or OCaml system
        unset OPAM_SWITCH_PREFIX
        unset OPAMSWITCH
        unset CAML_LD_LIBRARY_PATH
        unset OCAMLLIB
        unset OCAML_TOPLEVEL_PATH

        prog=\$1
        shift

        # Optionally skip troubleshooting
        troubleshooting=1
        if [ "\$#" -ge 1 ] && [ "\$prog" = opam ] && [ "\$1" = "--no-troubleshooting" ]; then
            shift
            troubleshooting=0
        fi

        echo "Running inside Docker container: \$prog \$*" >&2
        set +e
        "\$prog" "\$@"
        exitcode=\$?
        if [ \$troubleshooting = 1 ] && [ \$prog = opam ]; then
            [ \$exitcode = 0 ] || "/work/.ci/sd4/troubleshoot-opam.sh" \$OPAMROOT
        fi
        exit \$exitcode
        EOF
                chmod +x .ci/sd4/run-in-docker
                ;;
            esac

            cat >.ci/sd4/deescalate <<EOF
        #!/bin/sh
        set -euf

        if [ -e /work/.ci/sd4/bs/bin/deps.tar.gz ]; then
            tar xCfz / /work/.ci/sd4/bs/bin/deps.tar.gz
        fi

        groupadd -g ${GROUP_ID} ${GROUP_NAME}
        useradd -l -m -u ${USER_ID} -g ${GROUP_ID} ${USER_NAME}
        exec runuser -u ${USER_NAME} -g ${GROUP_NAME} -- "\$@"
        EOF

            chmod +x .ci/sd4/deescalate

            # -----------------------------------
            # Create run-with-env
            # -----------------------------------

            install -d .ci/sd4/dist

            if [ -x .ci/sd4/dockcross ]; then
                # Adding empty dockcross root volume avoids:
                #    cp: target ‘/home/root/’ is not a directory
                #    chown: cannot access ‘/home/root’: No such file or directory
                # from https://github.com/dockcross/dockcross/blob/96d87416f639af0204bdd42553e4b99315ca8476/imagefiles/entrypoint.sh#L31-L32
                install -d .ci/sd4/edr

                cat >.ci/sd4/run-with-env <<EOF
        #!/bin/sh
        set -euf

        HERE=\$(dirname "\$0")
        HERE=\$(cd "\$HERE" && pwd)
        PROJECT_DIR=\$(cd "\$HERE"/../.. && pwd)

        # Optionally enable terminal if and only if '-it' option given
        termargs=
        if [ "\$#" -ge 1 ] && [ "\$1" = "-it" ]; then
            shift
            termargs=-it
        fi

        exec bash "\${PROJECT_DIR}"/.ci/sd4/dockcross ${dockcross_cli_image_args} --args "\${termargs} -v \${PROJECT_DIR}/.ci/sd4/edr:/home/root ${dockcross_run_extra_args:-}" /work/.ci/sd4/run-in-docker "\$@"
        EOF
                chmod +x .ci/sd4/run-with-env

                validate_supports_docker

                # Bundle for consumers of setup-dkml.yml
                echo '__ run-in-docker __'
                cat .ci/sd4/run-in-docker
                echo '___________________'
                do_tar_rf .ci/sd4/dist/run-with-env.tar .ci/sd4/run-with-env .ci/sd4/run-in-docker .ci/sd4/edr

            elif [ "${in_docker:-}" = "true" ] && [ -n "${docker_image:-}" ]; then

                cat >.ci/sd4/run-with-env <<EOF
        #!/bin/sh
        set -euf
        exec ${docker_runner:-docker run --rm --workdir /work} -v "\$PWD:/work" '$docker_image_id' /work/.ci/sd4/run-in-docker "\$@"
        EOF
                chmod +x .ci/sd4/run-with-env

                validate_supports_docker

                # Bundle for consumers of setup-dkml.yml
                echo '__ run-in-docker __'
                cat .ci/sd4/run-in-docker
                echo '________________________'
                echo '__ deescalate __'
                cat .ci/sd4/deescalate
                echo '________________'
                do_tar_rf .ci/sd4/dist/run-with-env.tar .ci/sd4/run-with-env .ci/sd4/run-in-docker .ci/sd4/deescalate

            else

                cat >.ci/sd4/run-with-env <<EOF
        #!/bin/sh
        set -euf

        HERE=\$(dirname "\$0")
        HERE=\$(cd "\$HERE" && pwd)
        PROJECT_DIR=\$(cd "\$HERE"/../.. && pwd)

        export PATH="\${PROJECT_DIR}/.ci/local/bin:\${PROJECT_DIR}/.ci/sd4/bs/bin:\$PATH"
        export OPAMROOT='${opam_root}'
        export OPAMROOTISOK=1

        # Reset environment so no conflicts with a parent Opam or OCaml system
        unset OPAM_SWITCH_PREFIX
        unset OPAMSWITCH
        unset CAML_LD_LIBRARY_PATH
        unset OCAMLLIB
        unset OCAML_TOPLEVEL_PATH

        prog=\$1
        shift

        # Optionally skip troubleshooting
        troubleshooting=1
        if [ "\$#" -ge 1 ] && [ "\$prog" = opam ] && [ "\$1" = "--no-troubleshooting" ]; then
            shift
            troubleshooting=0
        fi

        echo "Running: \$prog \$*" >&2
        set +e
        "\$prog" "\$@"
        exitcode=\$?
        if [ \$troubleshooting = 1 ] && [ \$prog = opam ]; then
            [ \$exitcode = 0 ] || "\${PROJECT_DIR}/.ci/sd4/troubleshoot-opam.sh" \$OPAMROOT
        fi
        exit \$exitcode
        EOF
                chmod +x .ci/sd4/run-with-env

                # Bundle for consumers of setup-dkml.yml
                do_tar_rf .ci/sd4/dist/run-with-env.tar .ci/sd4/run-with-env

            fi
            echo '__ run-with-env __'
            cat .ci/sd4/run-with-env
            echo '__________________'

            # ------
            # cmdrun
            # ------

            install -d .ci/sd4/opamrun
            cat >.ci/sd4/opamrun/cmdrun <<EOF
        #!/bin/sh
        set -euf

        HERE=\$(dirname "\$0")
        HERE=\$(cd "\$HERE" && pwd)
        PROJECT_DIR=\$(cd "\$HERE"/../../.. && pwd)

        # Add MSVC compiler environment if available
        if [ -e "\${PROJECT_DIR}/.ci/sd4/msvcenv" ]; then
            _oldpath="\$PATH"
            # shellcheck disable=SC1091
            . "\${PROJECT_DIR}/.ci/sd4/msvcenv"
            PATH="\$PATH:\$_oldpath"

            # MSVC (link.exe) needs a TMP as well.
            # Confer: https://docs.microsoft.com/en-us/cpp/build/reference/linking?view=msvc-170#link-environment-variables
            if [ -z "\${TMP:-}" ]; then
                # GitHub Actions as of 2022-10 does not set TMP. GitLab CI/CD does.
                TMP="\$RUNNER_TEMP"
            fi
            export TMP
            if [ -x /usr/bin/cygpath ]; then
                TMP=\$(/usr/bin/cygpath -aw "\$TMP")
            fi
        fi

        # Windows
        if [ -n "\${COMSPEC:-}" ]; then
            # We must place MSYS2 in front of path so that MSYS2
            # tar.exe is used instead of Windows tar.exe.
            PATH="/usr/bin:\$PATH"
        fi

        # Propagate important CI environment variables
        export CI='${CI:-}'

        exec "\${PROJECT_DIR}/.ci/sd4/run-with-env" "\$@"
        EOF
            chmod +x .ci/sd4/opamrun/cmdrun
            echo '__ cmdrun __'
            cat .ci/sd4/opamrun/cmdrun
            echo '____________'

            # -------
            # opamrun
            # -------

            install -d .ci/sd4/opamrun
            cat >.ci/sd4/opamrun/opamrun <<EOF
        #!/bin/sh
        set -euf

        HERE=\$(dirname "\$0")
        HERE=\$(cd "\$HERE" && pwd)
        PROJECT_DIR=\$(cd "\$HERE"/../../.. && pwd)

        exec "\${PROJECT_DIR}/.ci/sd4/opamrun/cmdrun" opam "\$@"
        EOF
            chmod +x .ci/sd4/opamrun/opamrun
            echo '__ opamrun __'
            cat .ci/sd4/opamrun/opamrun
            echo '_____________'

            # Bundle for consumers of setup-dkml.yml
            do_tar_rf .ci/sd4/dist/run-with-env.tar .ci/sd4/opamrun
        }
        section_begin 'write-opam-scripts' 'Write opam scripts'
        do_write_opam_scripts
        section_end 'write-opam-scripts'

        # Expose opamrun (also used for consumers of setup-dkml.yml) to GitHub
        if [ -n "${GITHUB_PATH:-}" ]; then
            opamrunabs="$setup_WORKSPACE/.ci/sd4/opamrun"
            if [ -x /usr/bin/cygpath ]; then opamrunabs=$(/usr/bin/cygpath -aw "$opamrunabs"); fi
            echo "$opamrunabs" >>"$GITHUB_PATH"
            # Special case: GITHUB_PATH does not influence msys2.CMD of msys2/setup-msys2@v2, so place in real MSYS2 PATH
            if [ -n "${MSYSTEM:-}" ]; then
                install -d /usr/local/bin
                install .ci/sd4/opamrun/opamrun /usr/local/bin/opamrun
            fi
        fi

        # Place opamrun in the immediate PATH
        PATH="$setup_WORKSPACE/.ci/sd4/opamrun:$PATH"

        #   Complicated Opam sequence is because:
        #   1. Opam's default curl does not work on Windows,
        #      and `opam init` does not provide a way to change it (TODO: need
        #      a PR!).
        #   2. We have to separate the Opam download cache from the other Opam
        #      caches
        if [ "${SKIP_OPAM_MODIFICATIONS:-}" = "false" ] && [ ! -s "$opam_root/.ci.root-init" ]; then # non-empty init file so can be cached irrespective of existence
            section_begin opam-init 'Initialize opam root'

            # Clear any partial previous attempt
            rm -rf "$opam_root"
            
            # Set --git-location variant
            if [ -n "${GIT_LOCATION:-}" ]; then
                if [ -x /usr/bin/cygpath ]; then
                    GIT_LOCATION_MIXED=$(/usr/bin/cygpath -am "$GIT_LOCATION")
                    opamrun_gitloc() {
                        opamrun "$@" "--git-location=$GIT_LOCATION_MIXED"
                    }
                else
                    opamrun_gitloc() {
                        opamrun "$@" "--git-location=$GIT_LOCATION"
                    }
                fi
            else
                opamrun_gitloc() {
                    opamrun "$@"
                }
            fi

            case "$dkml_host_abi,${in_docker:-}" in
            windows_*,*)
                eor=$(/usr/bin/cygpath -am "$setup_WORKSPACE"/.ci/sd4/eor)
                cygloc=$(/usr/bin/cygpath -am /)
                case "$(opamrun --version)" in
                 2.1.*|2.0.*|1.*) opamrun init --disable-sandboxing --no-setup --kind local --bare "$eor" ;;
                 *) opamrun_gitloc init --disable-sandboxing --no-setup --kind local "--cygwin-location=$cygloc" --bare "$eor" ;;
                esac
                case "$(opamrun --version)" in
                 2.0.*) echo 'download-command: wget' >>"$opam_root/config" ;;
                 *) opamrun option --yes --global download-command=wget ;;
                esac
                ;;
            *,true)
                #  no --git-location needed inside Docker container
                opamrun init --disable-sandboxing --no-setup --kind local --bare "/work/.ci/sd4/eor"
                ;;
            *)
                case "$(opamrun --version)" in
                 2.1.*|2.0.*|1.*) opamrun init --disable-sandboxing --no-setup --kind local --bare "$setup_WORKSPACE/.ci/sd4/eor" ;;
                 *) opamrun_gitloc init --disable-sandboxing --no-setup --kind local --bare "$setup_WORKSPACE/.ci/sd4/eor" ;;
                esac
                ;;
            esac
            echo yes > "$opam_root/.ci.root-init"

            section_end opam-init
        fi

        if [ "${SKIP_OPAM_MODIFICATIONS:-}" = "false" ]; then
            section_begin opam-vars "Summary: opam global variables"
            opamrun --no-troubleshooting var --global || true
            section_end opam-vars
        fi

        # Build OCaml

        do_switch_create() {
            do_switch_create_NAME=$1
            shift

            section_begin "switch-create-$do_switch_create_NAME" "Create opam switch '$do_switch_create_NAME'"
            # Create, or recreate, the Opam switch. The Opam switch should not be
            # cached except for the compiler (confer docs for setup-ocaml GitHub
            # Action) which is the 'dkml' switch (or the 'two' switch).
            # Check if the switch name is present in the Opam root (which may come from cache)
            NOMINALLY_PRESENT=false
            if opamrun switch list --short | grep "^${do_switch_create_NAME}\$"; then NOMINALLY_PRESENT=true; fi

            # Check if the switch is actually present in case of cache incoherence
            # or corrupt Opam state that could result in:
            #   Error:  No config file found for switch dkml. Switch broken?
            if [ $NOMINALLY_PRESENT = true ] && [ ! -e "$opam_root/$do_switch_create_NAME/.opam-switch/switch-config" ]; then
                # Remove the switch name from Opam root, and any partial switch state.
                # Ignore inevitable warnings/failure about missing switch.
                opamrun --no-troubleshooting switch remove "$do_switch_create_NAME" --yes || true
                rm -rf "${opam_root:?}/$do_switch_create_NAME"
                NOMINALLY_PRESENT=false
            fi

            if [ $NOMINALLY_PRESENT = false ]; then
                opamrun switch create "$do_switch_create_NAME" --empty --yes
            fi
            section_end "switch-create-$do_switch_create_NAME"
        }
        if [ "${SKIP_OPAM_MODIFICATIONS:-}" = "false" ]; then
            do_switch_create dkml
            if [ "${SECONDARY_SWITCH:-}" = "true" ]; then
                do_switch_create two
            else
                section_begin "switch-create-two" "Create empty opam switch 'two'"
                # Always create a secondary switch ... just empty. Avoid problems with cache content missing
                # and idempotency.
                opamrun --no-troubleshooting switch remove two --yes || true
                rm -rf "$opam_root/two"
                opamrun switch create two --empty --yes
                section_end "switch-create-two"
            fi
        fi

        do_switch_active() {
            section_begin "switch-active" "Set dkml as active switch"
            opamrun switch set dkml --yes
            section_end "switch-active"
        }
        if [ "${SKIP_OPAM_MODIFICATIONS:-}" = "false" ]; then
            do_switch_active
        fi

        case "${DISKUV_OPAM_REPOSITORY:-}" in
          file://*) 
            DISKUV_OPAM_REPOSITORY_URI="${DISKUV_OPAM_REPOSITORY}" ;;
          *)
            DISKUV_OPAM_REPOSITORY_URI="git+https://github.com/diskuv/diskuv-opam-repository.git#${DISKUV_OPAM_REPOSITORY:-$DEFAULT_DISKUV_OPAM_REPOSITORY_TAG}" ;;
        esac

        do_opam_repositories_add() {
            section_begin "opam-repo-add" "Add 'diskuv' opam repository"
            if ! opamrun --no-troubleshooting repository list -s | grep '^diskuv'; then
                opamrun repository add diskuv "${DISKUV_OPAM_REPOSITORY_URI}" --yes --dont-select
            fi
            section_end "opam-repo-add"
        }
        if [ "${SKIP_OPAM_MODIFICATIONS:-}" = "false" ]; then
            do_opam_repositories_add
        fi

        do_opam_repositories_config() {
            do_opam_repositories_config_NAME=$1
            shift

            section_begin "opam-repo-$do_opam_repositories_config_NAME" "Attach repositories to $do_opam_repositories_config_NAME"

            if [ ! -s "$opam_root/.ci.$do_opam_repositories_config_NAME.repo-init" ]; then # non-empty init file so can be cached irrespective of existence
                opamrun --no-troubleshooting repository remove default --switch "$do_opam_repositories_config_NAME" --yes || true
                opamrun --no-troubleshooting repository remove diskuv --switch "$do_opam_repositories_config_NAME" --yes || true
                opamrun repository add default --switch "$do_opam_repositories_config_NAME" --yes
                opamrun repository add diskuv --switch "$do_opam_repositories_config_NAME" --yes
                echo yes > "$opam_root/.ci.$do_opam_repositories_config_NAME.repo-init"
            fi

            section_end "opam-repo-$do_opam_repositories_config_NAME"
        }
        if [ "${SKIP_OPAM_MODIFICATIONS:-}" = "false" ]; then
            do_opam_repositories_config dkml
            if [ "${SECONDARY_SWITCH:-}" = "true" ]; then
                do_opam_repositories_config two
            fi
        fi

        do_opam_repositories_update() {
            section_begin "opam-repo-update" "Update opam repositories"
            # The default repository may be the initial 'eor' (empty) repository
            opamrun repository set-url default "git+https://github.com/ocaml/opam-repository.git#${OCAML_OPAM_REPOSITORY:-$DEFAULT_OCAML_OPAM_REPOSITORY_TAG}" --yes
            # Always set the `diskuv` repository url since it can change
            opamrun repository set-url diskuv "${DISKUV_OPAM_REPOSITORY_URI}" --yes --dont-select
            # Update both `default` and `diskuv` Opam repositories
            opamrun update default diskuv
            section_end "opam-repo-update"
        }
        if [ "${SKIP_OPAM_MODIFICATIONS:-}" = "false" ]; then
            do_opam_repositories_update
        fi

        do_pins() {
            do_pins_NAME=$1
            shift

            section_begin "opam-pins-$do_pins_NAME" "Opam pins for $do_pins_NAME switch"
            #   adapted from dkml-runtime-common's _common_tool.sh:get_opam_switch_state_toplevelsection
            if [ -e "$opam_root/$do_pins_NAME/.opam-switch/switch-state" ]; then
                #       shellcheck disable=SC2016
                awk -v section="pinned" \
                    '$1 ~ ":" {state=0} $1==(section ":") {state=1} state==1{print}' \
                    "$opam_root/$do_pins_NAME/.opam-switch/switch-state" \
                    > "$opam_root/.ci.$do_pins_NAME.pinned"
            else
                touch "$opam_root/.ci.$do_pins_NAME.pinned"
            fi
            printf "#!/bin/sh\nset -eufx\n" > "$opam_root/.ci.$do_pins_NAME.do.sh"
            do_pin_add() {
                do_pin_add_NAME=$1; shift
                do_pin_add_VER=$1; shift
                # ex. "astring.1.0.2" - The double-quotes are necessary.
                if ! grep -q "\"$do_pin_add_NAME.$do_pin_add_VER\"" "$opam_root/.ci.$do_pins_NAME.pinned"; then
                    printf "opam pin add --switch '%s' --yes --no-action -k version '%s' '%s'\n" "$do_pins_NAME" "$do_pin_add_NAME" "$do_pin_add_VER" >> "$opam_root/.ci.$do_pins_NAME.do.sh"
                fi
            }
            ### BEGIN pin-adds. DO NOT EDIT THE LINES IN THIS SECTION
            # Managed by bump-packages.cmake
            do_pin_add MlFront_Unpack "${PIN_MLFRONT_UNPACK}"
            do_pin_add angstrom "${PIN_ANGSTROM}"
            do_pin_add angstrom-lwt-unix "${PIN_ANGSTROM_LWT_UNIX}"
            do_pin_add astring "${PIN_ASTRING}"
            do_pin_add base "${PIN_BASE}"
            do_pin_add base64 "${PIN_BASE64}"
            do_pin_add bigarray-compat "${PIN_BIGARRAY_COMPAT}"
            do_pin_add bigstringaf "${PIN_BIGSTRINGAF}"
            do_pin_add bos "${PIN_BOS}"
            do_pin_add camlp-streams "${PIN_CAMLP_STREAMS}"
            do_pin_add chrome-trace "${PIN_CHROME_TRACE}"
            do_pin_add cmdliner "${PIN_CMDLINER}"
            do_pin_add conf-bash "${PIN_CONF_BASH}"
            do_pin_add conf-dkml-sys-opam "${PIN_CONF_DKML_SYS_OPAM}"
            do_pin_add conf-dksdk "${PIN_CONF_DKSDK}"
            do_pin_add conf-pkg-config "${PIN_CONF_PKG_CONFIG}"
            do_pin_add conf-sdl2 "${PIN_CONF_SDL2}"
            do_pin_add conf-sqlite3 "${PIN_CONF_SQLITE3}"
            do_pin_add cppo "${PIN_CPPO}"
            do_pin_add crunch "${PIN_CRUNCH}"
            do_pin_add csexp "${PIN_CSEXP}"
            do_pin_add cstruct "${PIN_CSTRUCT}"
            do_pin_add ctypes "${PIN_CTYPES}"
            do_pin_add ctypes-foreign "${PIN_CTYPES_FOREIGN}"
            do_pin_add cudf "${PIN_CUDF}"
            do_pin_add dap "${PIN_DAP}"
            do_pin_add digestif "${PIN_DIGESTIF}"
            do_pin_add diskuvbox "${PIN_DISKUVBOX}"
            do_pin_add dkml-apps "${PIN_DKML_APPS}"
            do_pin_add dkml-base-compiler "${PIN_DKML_BASE_COMPILER}"
            do_pin_add dkml-build-desktop "${PIN_DKML_BUILD_DESKTOP}"
            do_pin_add dkml-c-probe "${PIN_DKML_C_PROBE}"
            do_pin_add dkml-compiler-src "${PIN_DKML_COMPILER_SRC}"
            do_pin_add dkml-component-xx-console "${PIN_DKML_COMPONENT_XX_CONSOLE}"
            do_pin_add dkml-exe "${PIN_DKML_EXE}"
            do_pin_add dkml-exe-lib "${PIN_DKML_EXE_LIB}"
            do_pin_add dkml-host-abi "${PIN_DKML_HOST_ABI}"
            do_pin_add dkml-host-abi-windows_x86_64 "${PIN_DKML_HOST_ABI_WINDOWS_X86_64}"
            do_pin_add dkml-install "${PIN_DKML_INSTALL}"
            do_pin_add dkml-install-installer "${PIN_DKML_INSTALL_INSTALLER}"
            do_pin_add dkml-install-runner "${PIN_DKML_INSTALL_RUNNER}"
            do_pin_add dkml-installer-ocaml-common "${PIN_DKML_INSTALLER_OCAML_COMMON}"
            do_pin_add dkml-option-bx32 "${PIN_DKML_OPTION_BX32}"
            do_pin_add dkml-package-console "${PIN_DKML_PACKAGE_CONSOLE}"
            do_pin_add dkml-runtime-common "${PIN_DKML_RUNTIME_COMMON}"
            do_pin_add dkml-runtime-common-native "${PIN_DKML_RUNTIME_COMMON_NATIVE}"
            do_pin_add dkml-runtime-distribution "${PIN_DKML_RUNTIME_DISTRIBUTION}"
            do_pin_add dkml-runtimelib "${PIN_DKML_RUNTIMELIB}"
            do_pin_add dkml-runtimescripts "${PIN_DKML_RUNTIMESCRIPTS}"
            do_pin_add dkml-target-abi-any "${PIN_DKML_TARGET_ABI_ANY}"
            do_pin_add dkml-target-abi-windows_x86_64 "${PIN_DKML_TARGET_ABI_WINDOWS_X86_64}"
            do_pin_add dkml-workflows "${PIN_DKML_WORKFLOWS}"
            do_pin_add dune "${PIN_DUNE}"
            do_pin_add dune-action-plugin "${PIN_DUNE_ACTION_PLUGIN}"
            do_pin_add dune-build-info "${PIN_DUNE_BUILD_INFO}"
            do_pin_add dune-configurator "${PIN_DUNE_CONFIGURATOR}"
            do_pin_add dune-glob "${PIN_DUNE_GLOB}"
            do_pin_add dune-private-libs "${PIN_DUNE_PRIVATE_LIBS}"
            do_pin_add dune-rpc "${PIN_DUNE_RPC}"
            do_pin_add dune-rpc-lwt "${PIN_DUNE_RPC_LWT}"
            do_pin_add dune-site "${PIN_DUNE_SITE}"
            do_pin_add dyn "${PIN_DYN}"
            do_pin_add earlybird "${PIN_EARLYBIRD}"
            do_pin_add either "${PIN_EITHER}"
            do_pin_add eqaf "${PIN_EQAF}"
            do_pin_add extlib "${PIN_EXTLIB}"
            do_pin_add feather "${PIN_FEATHER}"
            do_pin_add fiber "${PIN_FIBER}"
            do_pin_add fix "${PIN_FIX}"
            do_pin_add fmt "${PIN_FMT}"
            do_pin_add fpath "${PIN_FPATH}"
            do_pin_add graphics "${PIN_GRAPHICS}"
            do_pin_add hmap "${PIN_HMAP}"
            do_pin_add host-arch-x86_64 "${PIN_HOST_ARCH_X86_64}"
            do_pin_add integers "${PIN_INTEGERS}"
            do_pin_add iostream "${PIN_IOSTREAM}"
            do_pin_add iter "${PIN_ITER}"
            do_pin_add jane-street-headers "${PIN_JANE_STREET_HEADERS}"
            do_pin_add jingoo "${PIN_JINGOO}"
            do_pin_add jsonrpc "${PIN_JSONRPC}"
            do_pin_add jst-config "${PIN_JST_CONFIG}"
            do_pin_add lambda-term "${PIN_LAMBDA_TERM}"
            do_pin_add logs "${PIN_LOGS}"
            do_pin_add lru "${PIN_LRU}"
            do_pin_add lsp "${PIN_LSP}"
            do_pin_add lwt "${PIN_LWT}"
            do_pin_add lwt_ppx "${PIN_LWT_PPX}"
            do_pin_add lwt_react "${PIN_LWT_REACT}"
            do_pin_add mccs "${PIN_MCCS}"
            do_pin_add mdx "${PIN_MDX}"
            do_pin_add menhir "${PIN_MENHIR}"
            do_pin_add menhirCST "${PIN_MENHIRCST}"
            do_pin_add menhirLib "${PIN_MENHIRLIB}"
            do_pin_add menhirSdk "${PIN_MENHIRSDK}"
            do_pin_add merlin-lib "${PIN_MERLIN_LIB}"
            do_pin_add metapp "${PIN_METAPP}"
            do_pin_add metaquot "${PIN_METAQUOT}"
            do_pin_add mew "${PIN_MEW}"
            do_pin_add mew_vi "${PIN_MEW_VI}"
            do_pin_add msys2 "${PIN_MSYS2}"
            do_pin_add msys2-clang64 "${PIN_MSYS2_CLANG64}"
            do_pin_add num "${PIN_NUM}"
            do_pin_add ocaml "${PIN_OCAML}"
            do_pin_add ocaml-compiler-libs "${PIN_OCAML_COMPILER_LIBS}"
            do_pin_add ocaml-lsp-server "${PIN_OCAML_LSP_SERVER}"
            do_pin_add ocaml-syntax-shims "${PIN_OCAML_SYNTAX_SHIMS}"
            do_pin_add ocaml-version "${PIN_OCAML_VERSION}"
            do_pin_add ocamlbuild "${PIN_OCAMLBUILD}"
            do_pin_add ocamlc-loc "${PIN_OCAMLC_LOC}"
            do_pin_add ocamlfind "${PIN_OCAMLFIND}"
            do_pin_add ocamlformat "${PIN_OCAMLFORMAT}"
            do_pin_add ocamlformat-lib "${PIN_OCAMLFORMAT_LIB}"
            do_pin_add ocamlformat-rpc-lib "${PIN_OCAMLFORMAT_RPC_LIB}"
            do_pin_add ocp-indent "${PIN_OCP_INDENT}"
            do_pin_add ocplib-endian "${PIN_OCPLIB_ENDIAN}"
            do_pin_add odoc "${PIN_ODOC}"
            do_pin_add odoc-parser "${PIN_ODOC_PARSER}"
            do_pin_add ordering "${PIN_ORDERING}"
            do_pin_add parsexp "${PIN_PARSEXP}"
            do_pin_add path_glob "${PIN_PATH_GLOB}"
            do_pin_add posixat "${PIN_POSIXAT}"
            do_pin_add pp "${PIN_PP}"
            do_pin_add ppx_assert "${PIN_PPX_ASSERT}"
            do_pin_add ppx_base "${PIN_PPX_BASE}"
            do_pin_add ppx_cold "${PIN_PPX_COLD}"
            do_pin_add ppx_compare "${PIN_PPX_COMPARE}"
            do_pin_add ppx_derivers "${PIN_PPX_DERIVERS}"
            do_pin_add ppx_deriving "${PIN_PPX_DERIVING}"
            do_pin_add ppx_deriving_yojson "${PIN_PPX_DERIVING_YOJSON}"
            do_pin_add ppx_enumerate "${PIN_PPX_ENUMERATE}"
            do_pin_add ppx_expect "${PIN_PPX_EXPECT}"
            do_pin_add ppx_globalize "${PIN_PPX_GLOBALIZE}"
            do_pin_add ppx_hash "${PIN_PPX_HASH}"
            do_pin_add ppx_here "${PIN_PPX_HERE}"
            do_pin_add ppx_ignore_instrumentation "${PIN_PPX_IGNORE_INSTRUMENTATION}"
            do_pin_add ppx_inline_test "${PIN_PPX_INLINE_TEST}"
            do_pin_add ppx_optcomp "${PIN_PPX_OPTCOMP}"
            do_pin_add ppx_pipebang "${PIN_PPX_PIPEBANG}"
            do_pin_add ppx_sexp_conv "${PIN_PPX_SEXP_CONV}"
            do_pin_add ppx_yojson_conv_lib "${PIN_PPX_YOJSON_CONV_LIB}"
            do_pin_add ppxlib "${PIN_PPXLIB}"
            do_pin_add psq "${PIN_PSQ}"
            do_pin_add ptime "${PIN_PTIME}"
            do_pin_add qrc "${PIN_QRC}"
            do_pin_add re "${PIN_RE}"
            do_pin_add react "${PIN_REACT}"
            do_pin_add refl "${PIN_REFL}"
            do_pin_add result "${PIN_RESULT}"
            do_pin_add rresult "${PIN_RRESULT}"
            do_pin_add seq "${PIN_SEQ}"
            do_pin_add sexplib "${PIN_SEXPLIB}"
            do_pin_add sexplib0 "${PIN_SEXPLIB0}"
            do_pin_add sha "${PIN_SHA}"
            do_pin_add shexp "${PIN_SHEXP}"
            do_pin_add spawn "${PIN_SPAWN}"
            do_pin_add sqlite3 "${PIN_SQLITE3}"
            do_pin_add stdcompat "${PIN_STDCOMPAT}"
            do_pin_add stdio "${PIN_STDIO}"
            do_pin_add stdlib-shims "${PIN_STDLIB_SHIMS}"
            do_pin_add stdune "${PIN_STDUNE}"
            do_pin_add stringext "${PIN_STRINGEXT}"
            do_pin_add time_now "${PIN_TIME_NOW}"
            do_pin_add tiny_httpd "${PIN_TINY_HTTPD}"
            do_pin_add topkg "${PIN_TOPKG}"
            do_pin_add traverse "${PIN_TRAVERSE}"
            do_pin_add trie "${PIN_TRIE}"
            do_pin_add tsort "${PIN_TSORT}"
            do_pin_add tyxml "${PIN_TYXML}"
            do_pin_add uchar "${PIN_UCHAR}"
            do_pin_add uri "${PIN_URI}"
            do_pin_add utop "${PIN_UTOP}"
            do_pin_add uucp "${PIN_UUCP}"
            do_pin_add uuidm "${PIN_UUIDM}"
            do_pin_add uuseg "${PIN_UUSEG}"
            do_pin_add uutf "${PIN_UUTF}"
            do_pin_add with-dkml "${PIN_WITH_DKML}"
            do_pin_add xdg "${PIN_XDG}"
            do_pin_add yojson "${PIN_YOJSON}"
            do_pin_add zed "${PIN_ZED}"
            ### END pin-adds. DO NOT EDIT THE LINES ABOVE
            cmdrun sh "$opam_root/.ci.$do_pins_NAME.do.sh"
            section_end "opam-pins-$do_pins_NAME"

            # --------------
            # REMAINING PINS
            # --------------

            # These come after [pin-adds] section since [pin-adds] may need to be overridden by
            # users' choice.

            # dkml-base-compiler

            if [ "${DKML_COMPILER:-}" != '@repository@' ] && [ -z "${DKML_COMPILER:-}" ] && [ -z "${OCAML_COMPILER:-}" ]; then
                section_begin checkout-dkml-base-compiler "Pin dkml-base-compiler to default ${DEFAULT_DKML_COMPILER} (neither dkml-base-compiler nor OCAML_COMPILER specified) for $do_pins_NAME switch"
                opamrun pin add --switch "$do_pins_NAME" --yes --no-action dkml-base-compiler "https://github.com/diskuv/dkml-compiler.git#${DEFAULT_DKML_COMPILER}"
                section_end checkout-dkml-base-compiler
            elif [ "${DKML_COMPILER:-}" != '@repository@' ] && [ -n "${DKML_COMPILER:-}" ] && [ -z "${OCAML_COMPILER:-}" ]; then
                section_begin checkout-dkml-base-compiler "Pin dkml-base-compiler to $DKML_COMPILER (dkml-base-compiler specified; no OCAML_COMPILER specified) for $do_pins_NAME switch"
                case "$DKML_COMPILER" in
                 file://*) opamrun pin add --switch "$do_pins_NAME" --yes --no-action dkml-base-compiler "${DKML_COMPILER}" ;;
                 *) opamrun pin add --switch "$do_pins_NAME" --yes --no-action dkml-base-compiler "https://github.com/diskuv/dkml-compiler.git#${DKML_COMPILER}" ;;
                esac
                section_end checkout-dkml-base-compiler
            elif [ -n "${OCAML_COMPILER:-}" ]; then
                # Validate OCAML_COMPILER (OCAML_COMPILER specified)
                case "${OCAML_COMPILER:-}" in
                4.12.1) true ;;
                4.14.0) true ;;
                4.14.2) true ;;
                *)
                    echo "OCAML_COMPILER version ${OCAML_COMPILER:-} is not supported"
                    exit 109
                    ;;
                esac

                section_begin checkout-dkml-base-compiler "Pin dkml-base-compiler (OCAML_COMPILER specified) for $do_pins_NAME switch"
                opamrun pin add --switch "$do_pins_NAME" --yes --no-action dkml-base-compiler "https://github.com/diskuv/dkml-compiler.git#${OCAML_COMPILER}-v${DKML_VERSION}"
                section_end checkout-dkml-base-compiler
            fi

            # conf-dkml-cross-toolchain

            if [ "${CONF_DKML_CROSS_TOOLCHAIN:-}" != '@repository@' ]; then
                section_begin checkout-conf-dkml-cross-toolchain "Pin conf-dkml-cross-toolchain for $do_pins_NAME switch"
                opamrun pin add --switch "$do_pins_NAME" --yes --no-action conf-dkml-cross-toolchain "https://github.com/diskuv/conf-dkml-cross-toolchain.git#$CONF_DKML_CROSS_TOOLCHAIN"
                section_end checkout-conf-dkml-cross-toolchain
            fi
        }

        if [ "${SKIP_OPAM_MODIFICATIONS:-}" = "false" ]; then
            do_pins dkml
            if [ "${SECONDARY_SWITCH:-}" = "true" ]; then
                do_pins two
            fi
        fi

        do_use_vsstudio() {
            do_use_vsstudio_NAME=$1
            shift
            case "$dkml_host_abi" in
            windows_*)
                section_begin "use-vsstudio-$do_use_vsstudio_NAME" "Use Visual Studio in dkml-* Opam packages (Windows) for $do_use_vsstudio_NAME switch"

                # shellcheck disable=SC2153
                E_VS_DIR=$(escape_arg_as_ocaml_string "$VS_DIR")
                # shellcheck disable=SC2153
                E_VS_VCVARSVER=$(escape_arg_as_ocaml_string "$VS_VCVARSVER")
                # shellcheck disable=SC2153
                E_VS_WINSDKVER=$(escape_arg_as_ocaml_string "$VS_WINSDKVER")
                # shellcheck disable=SC2153
                E_VS_MSVSPREFERENCE=$(escape_arg_as_ocaml_string "$VS_MSVSPREFERENCE")
                # shellcheck disable=SC2153
                E_VS_CMAKEGENERATOR=$(escape_arg_as_ocaml_string "$VS_CMAKEGENERATOR")

                case "$(opamrun --version)" in
                2.0.*)
                    if [ "${in_docker}" = "true" ]; then
                        echo Opam 2.0 support in dockcross to use a portable opam var prefix not yet implemented
                        exit 67
                    fi
                    OP=$(opamrun var prefix --switch "$do_use_vsstudio_NAME")
                    OPSC=$OP/.opam-switch/switch-config
                    if grep setenv: "$OPSC"; then
                        echo "INFO: Updating switch-config. Old was:"
                        awk '{print ">> " $0}' "$OPSC"

                        awk '$1=="setenv:"{x=1} x==0{print} x==1 && $0=="]"{x=0}' "$OPSC" >"$OPSC".trimmed
                        mv "$OPSC".trimmed "$OPSC"
                    fi
                    echo 'setenv: [' >>"$OPSC"
                    echo '  [DKML_COMPILE_SPEC = "1"]' >>"$OPSC"
                    echo '  [DKML_COMPILE_TYPE = "VS"]' >>"$OPSC"
                    echo "  [DKML_COMPILE_VS_DIR = \"$E_VS_DIR\"]" >>"$OPSC"
                    echo "  [DKML_COMPILE_VS_VCVARSVER = \"$E_VS_VCVARSVER\"]" >>"$OPSC"
                    echo "  [DKML_COMPILE_VS_WINSDKVER = \"$E_VS_WINSDKVER\"]" >>"$OPSC"
                    echo "  [DKML_COMPILE_VS_MSVSPREFERENCE = \"$E_VS_MSVSPREFERENCE\"]" >>"$OPSC"
                    echo "  [DKML_COMPILE_VS_CMAKEGENERATOR = \"$E_VS_CMAKEGENERATOR\"]" >>"$OPSC"
                    echo "  [DKML_HOST_ABI = \"${dkml_host_abi}\"]" >>"$OPSC"
                    echo "  [DKML_TARGET_ABI = \"${dkml_target_abi}\"]" >>"$OPSC"
                    echo ']' >>"$OPSC"
                    cat "$OPSC" # print
                    ;;
                *)
                    opamrun option --switch "$do_use_vsstudio_NAME" setenv= # reset
                    opamrun option --switch "$do_use_vsstudio_NAME" setenv+='DKML_COMPILE_SPEC = "1"'
                    opamrun option --switch "$do_use_vsstudio_NAME" setenv+='DKML_COMPILE_TYPE = "VS"'
                    opamrun option --switch "$do_use_vsstudio_NAME" setenv+="DKML_COMPILE_VS_DIR = \"$E_VS_DIR\""
                    opamrun option --switch "$do_use_vsstudio_NAME" setenv+="DKML_COMPILE_VS_VCVARSVER = \"$E_VS_VCVARSVER\""
                    opamrun option --switch "$do_use_vsstudio_NAME" setenv+="DKML_COMPILE_VS_WINSDKVER = \"$E_VS_WINSDKVER\""
                    opamrun option --switch "$do_use_vsstudio_NAME" setenv+="DKML_COMPILE_VS_MSVSPREFERENCE = \"$E_VS_MSVSPREFERENCE\""
                    opamrun option --switch "$do_use_vsstudio_NAME" setenv+="DKML_COMPILE_VS_CMAKEGENERATOR = \"$E_VS_CMAKEGENERATOR\""
                    opamrun option --switch "$do_use_vsstudio_NAME" setenv+="DKML_HOST_ABI = \"${dkml_host_abi}\""
                    opamrun option --switch "$do_use_vsstudio_NAME" setenv+="DKML_TARGET_ABI = \"${dkml_target_abi}\""
                    opamrun option --switch "$do_use_vsstudio_NAME" setenv # print
                    ;;
                esac

                # shellcheck disable=SC2016
                opamrun exec --switch "$do_use_vsstudio_NAME" -- sh -c 'echo $VCToolsRedistDir'

                section_end "use-vsstudio-$do_use_vsstudio_NAME"
                ;;
            esac
        }
        if [ "${SKIP_OPAM_MODIFICATIONS:-}" = "false" ]; then
            do_use_vsstudio dkml
            if [ "${SECONDARY_SWITCH:-}" = "true" ]; then
                do_use_vsstudio two
            fi
        fi

        # Because dune.X.Y.Z+shim (and any user DkML packages) requires DkML installed (after all, it is just
        # a with-dkml.exe shim), we need either dkmlvars-v2.sexp or DkML environment
        # variables. Confer: Dkml_runtimelib.Dkml_context.get_dkmlversion
        #
        # grep matches either:
        #   [... [DiskuvOCamlVersion = "1.0.1"] ...]
        #   DiskuvOCamlVersion = "1.0.1"
        do_setenv() {
            do_setenv_SWITCH=$1
            shift
            section_begin "setenv-$do_setenv_SWITCH" "Set opam option for $do_setenv_SWITCH switch"
            opamrun option --switch "$do_setenv_SWITCH" setenv > ".ci/sd4/setenv.$do_setenv_SWITCH.txt"
            if ! grep -q '\(^|\[\)DiskuvOCamlVarsVersion ' ".ci/sd4/setenv.$do_setenv_SWITCH.txt"; then
                opamrun option --switch "$do_setenv_SWITCH" setenv+='DiskuvOCamlVarsVersion = "2"'
            fi
            if ! grep -q '\(^|\[\)DiskuvOCamlVersion ' ".ci/sd4/setenv.$do_setenv_SWITCH.txt"; then
                opamrun option --switch "$do_setenv_SWITCH" setenv+="DiskuvOCamlVersion = \"$DKML_VERSION\""
            fi
            if [ "$do_setenv_SWITCH" = dkml ] && [ -n "${DKML_HOME:-}" ]; then
              do_setenv_DKMLHOME_ESCAPED="$DKML_HOME"
              do_setenv_USRBIN_ESCAPED="$DKML_HOME/usr/bin"
              do_setenv_BIN_ESCAPED="$DKML_HOME/bin"
              if [ -x /usr/bin/cygpath ]; then
                do_setenv_DKMLHOME_ESCAPED=$(/usr/bin/cygpath -aw "$do_setenv_DKMLHOME_ESCAPED" | sed 's/\\/\\\\/g')
                do_setenv_USRBIN_ESCAPED=$(/usr/bin/cygpath -aw "$do_setenv_USRBIN_ESCAPED" | sed 's/\\/\\\\/g')
                do_setenv_BIN_ESCAPED=$(/usr/bin/cygpath -aw "$do_setenv_BIN_ESCAPED" | sed 's/\\/\\\\/g')
              fi
              if ! grep -q '\(^|\[\)DiskuvOCamlHome ' ".ci/sd4/setenv.$do_setenv_SWITCH.txt"; then
                  opamrun option --switch "$do_setenv_SWITCH" setenv+="DiskuvOCamlHome = \"$do_setenv_DKMLHOME_ESCAPED\""
              fi
              if ! grep -q '\(^|\[\)DiskuvOCamlBinaryPaths ' ".ci/sd4/setenv.$do_setenv_SWITCH.txt"; then
                  opamrun option --switch "$do_setenv_SWITCH" setenv+="DiskuvOCamlBinaryPaths = \"$do_setenv_USRBIN_ESCAPED;$do_setenv_BIN_ESCAPED\""
              fi
              if ! grep -q '\(^|\[\)DiskuvOCamlDeploymentId ' ".ci/sd4/setenv.$do_setenv_SWITCH.txt"; then
                  opamrun option --switch "$do_setenv_SWITCH" setenv+="DiskuvOCamlDeploymentId = \"setup-dkml-switch-$do_setenv_SWITCH\""
              fi
            fi
            case "${dkml_host_abi}" in
            windows_*)
                if ! grep -q '\(^|\[\)DiskuvOCamlMSYS2Dir ' ".ci/sd4/setenv.$do_setenv_SWITCH.txt"; then
                    if [ -x /usr/bin/cygpath ]; then
                        MSYS2_DIR_NATIVE=$(/usr/bin/cygpath -aw /)
                    else
                        # If we are already inside MSYS2 then MSYSTEM_PREFIX should be set. But cygpath should be there as well!!
                        echo "FATAL: Could not locate MSYS2: there was no cygpath"
                        exit 3
                    fi
                    MSYS2_DIR_NATIVE_ESCAPED=$(printf "%s" "$MSYS2_DIR_NATIVE" | sed 's/\\/\\\\/g')
                    opamrun option --switch "$do_setenv_SWITCH" setenv+="DiskuvOCamlMSYS2Dir = \"$MSYS2_DIR_NATIVE_ESCAPED\""
                fi
            esac
            section_end "setenv-$do_setenv_SWITCH"
        }
        if [ "${SKIP_OPAM_MODIFICATIONS:-}" = "false" ]; then
            do_setenv dkml
            if [ "${SECONDARY_SWITCH:-}" = "true" ]; then
                do_setenv two
            fi
        fi

        do_install_compiler() {
            do_install_compiler_NAME=$1
            shift
            section_begin "install-compiler-$do_install_compiler_NAME" "Install OCaml compiler for $do_install_compiler_NAME switch"
            opamrun pin list --switch "$do_install_compiler_NAME"
            # --assume-depexts: CI needs system packages? For reproducibility do it explicitly elsewhere. Example: g++-multilib gcc-multilib for linux_x86.
            #   shellcheck disable=SC2086
            opamrun upgrade --switch "$do_install_compiler_NAME" --assume-depexts --yes dkml-base-compiler conf-dkml-cross-toolchain "dkml-host-abi-${dkml_host_abi}" "dkml-target-abi-${dkml_target_abi}" ${ocaml_options:-}
            section_end "install-compiler-$do_install_compiler_NAME"
        }
        do_summary() {
            do_summary_NAME=$1
            shift
            section_begin "summary-$do_summary_NAME" "Summary: $do_summary_NAME switch"
            opamrun var --switch "$do_summary_NAME"
            opamrun exec --switch "$do_summary_NAME" -- ocamlc -config
            section_end "summary-$do_summary_NAME"
        }
        if [ "${SKIP_OPAM_MODIFICATIONS:-}" = "false" ]; then
            if ! [ "${PRIMARY_SWITCH_SKIP_INSTALL:-}" = "true" ]; then
                do_install_compiler dkml
            fi
            if [ "${SECONDARY_SWITCH:-}" = "true" ]; then
                do_install_compiler two
            fi
            if ! [ "${PRIMARY_SWITCH_SKIP_INSTALL:-}" = "true" ]; then
                do_summary dkml
            fi
            if [ "${SECONDARY_SWITCH:-}" = "true" ]; then
                do_summary two
            fi
        fi

        end_of_script

        cat > .ci/sd4/run-teardown-dkml.sh <<'end_of_script'
        #!/bin/sh
        set -euf

        teardown_WORKSPACE_VARNAME=$1
        shift
        teardown_WORKSPACE=$1
        shift

        # ------------------ Variables and functions ------------------------

        # shellcheck source=./common-values.sh
        . .ci/sd4/common-values.sh

        # Fixup opam_root on Windows to be mixed case. Set original_* and unix_* as well.
        fixup_opam_root

        # Set TEMP variable for Windows
        export_temp_for_windows

        # -------------------------------------------------------------------

        section_begin teardown-info "Summary: teardown-dkml"

        # shellcheck disable=SC2154
        echo "
        ================
        teardown-dkml.sh
        ================
        .
        ---------
        Arguments
        ---------
        WORKSPACE_VARNAME=$teardown_WORKSPACE_VARNAME
        WORKSPACE=$teardown_WORKSPACE
        .
        ------
        Inputs
        ------
        VERBOSE=${VERBOSE:-}
        .
        ------
        Matrix
        ------
        opam_root=${opam_root}
        original_opam_root=${original_opam_root}
        unix_opam_root=${unix_opam_root}
        unix_opam_root_cacheable=${unix_opam_root_cacheable}
        .
        "
        section_end teardown-info

        # Done with Opam cache!
        do_save_opam_cache() {
            if [ "$unix_opam_root_cacheable" = "$unix_opam_root" ]; then return; fi
            section_begin save-opam-cache "Transfer Opam cache to $original_opam_root"
            echo Starting transfer # need some output or GitLab CI will not display the section duration
            transfer_dir "$unix_opam_root" "$unix_opam_root_cacheable"
            echo Finished transfer
            section_end save-opam-cache
        }
        do_save_opam_cache

        do_fill_skipped_cache_entries() {
            section_begin fill-skipped-cache-entries "Populate skipped cache entries"

            # Needed to stop GitLab CI/CD cache warnings 'no matching files', etc.
            if [ ! -e .ci/sd4/vsenv.sh ]; then
                install -d .ci/sd4
                rm -f .ci/sd4/vsenv.sh
                touch .ci/sd4/vsenv.sh
                chmod +x .ci/sd4/vsenv.sh
                echo "Created empty vsenv.sh"
            else
                echo "Found vsenv.sh"
            fi

            if [ ! -d msys64 ]; then
                rm -rf msys64
                install -d msys64
                echo "Created empty msys64/"
            else
                echo "Found msys64/"
            fi
            touch msys64/.keep

            install -d "$unix_opam_root_cacheable"
            if [ -s "$unix_opam_root_cacheable/.ci.dkml.repo-init" ]; then
                echo "Found non-empty $unix_opam_root_cacheable/.ci.dkml.repo-init"
            else
                touch "$unix_opam_root_cacheable/.ci.dkml.repo-init"
                echo "Created empty $unix_opam_root_cacheable/.ci.dkml.repo-init"
            fi

            if [ -s "$unix_opam_root_cacheable/.ci.two.repo-init" ]; then
                echo "Found non-empty $unix_opam_root_cacheable/.ci.two.repo-init"
            else
                touch "$unix_opam_root_cacheable/.ci.two.repo-init"
                echo "Created empty $unix_opam_root_cacheable/.ci.two.repo-init"
            fi

            if [ -d "$unix_opam_root_cacheable/opam-init" ]; then
                echo "Found $unix_opam_root_cacheable/opam-init/"
            else
                rm -rf "$unix_opam_root_cacheable/opam-init"
                install -d "$unix_opam_root_cacheable/opam-init"
                echo "Created empty $unix_opam_root_cacheable/opam-init/"
            fi
            touch "$unix_opam_root_cacheable/opam-init/.keep"

            section_end fill-skipped-cache-entries
        }
        do_fill_skipped_cache_entries

        do_at_least_one_artifact() {
            install -d dist
            find dist -mindepth 1 -maxdepth 1 >.ci/dist.files
            if [ ! -s .ci/dist.files ]; then
                section_begin one-artifact "Create empty artifact file"

                # Avoid confusing "ERROR: No files to upload" in GitLab CI
                touch dist/.keep
                echo "Created dist/.keep"

                section_end one-artifact
            fi
        }
        do_at_least_one_artifact

        end_of_script

        install -d .ci/sd4

        cat > .ci/sd4/msvcenv.awk <<'end_of_script'
        # MSVC environment variables:
        # 1. https://docs.microsoft.com/en-us/cpp/build/reference/cl-environment-variables?view=msvc-170
        # 2. https://docs.microsoft.com/en-us/cpp/build/reference/linking?view=msvc-170#link-environment-variables (except TMP)
        # 3. VCToolsRedistDir: https://docs.microsoft.com/en-us/cpp/windows/redistributing-visual-cpp-files?view=msvc-170#locate-the-redistributable-files
        BEGIN{FS="="}
        $1=="CL"||$1=="_CL_"||$1=="INCLUDE"||$1=="LIBPATH" {print "export " $0}
        $1=="LINK"||$1=="_LINK_"||$1=="LIB"||$1=="PATH"    {print "export " $0}
        $1=="VCToolsRedistDir"                             {print "export " $0}

        end_of_script

        cat > .ci/sd4/msvcpath.awk <<'end_of_script'
        {
            # trim leading and trailing space
            sub(/^ */, "");
            sub(/ *$/, "");

            print "export PATH='" $0 "'";
        }
        end_of_script

    - name: Write PowerShell and Batch scripts
      shell: pwsh
      run: |
        $Content = @'
        # Diagnose Visual Studio environment variables (Windows)
        # This wastes time and has lots of rows! Only run if "VERBOSE" GitHub input key.
        if ( "${env:VERBOSE}" -eq "true" ) {
            if (Test-Path -Path "C:\Program Files (x86)\Windows Kits\10\include") {
                Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\include"
            }
            if (Test-Path -Path "C:\Program Files (x86)\Windows Kits\10\Extension SDKs\WindowsDesktop") {
                Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\Extension SDKs\WindowsDesktop"
            }

            $env:PSModulePath += "$([System.IO.Path]::PathSeparator).ci\sd4\g\dkml-runtime-distribution\src\windows"
            Import-Module Machine

            $allinstances = Get-VSSetupInstance
            $allinstances | ConvertTo-Json -Depth 5
        }

        # Make export expression [SN]NAME=[SV]VALUE[EV]
        # where [SN] is start name and [SV] and [EV] are start and end value
        if (("${env:GITLAB_CI}" -eq "true") -or ("${env:PC_CI}" -eq "true")) {
            # Executed immediately in POSIX shell, so must be a real POSIX shell variable declaration
            $ExportSN = "export "
            $ExportSV = "'"
            $ExportEV = "'"
            $ExportExt = ".sh"
        } else {
            # Goes into $env:GITHUB_ENV, so must be plain NAME=VALUE
            $ExportSN = ""
            $ExportSV = ""
            $ExportEV = ""
            $ExportExt = ".github"
        }

        # Locate Visual Studio (Windows)
        if ("${env:vsstudio_dir}" -eq "" -and (!(Test-Path -Path .ci/sd4/vsenv${ExportExt}) -or !(Test-Path -Path .ci/sd4/vsenv.ps1))) {
            $env:PSModulePath += "$([System.IO.Path]::PathSeparator).ci\sd4\g\dkml-runtime-distribution\src\windows"
            Import-Module Machine

            $CompatibleVisualStudios = Get-CompatibleVisualStudios -ErrorIfNotFound
            $CompatibleVisualStudios
            $ChosenVisualStudio = ($CompatibleVisualStudios | Select-Object -First 1)
            $VisualStudioProps = Get-VisualStudioProperties -VisualStudioInstallation $ChosenVisualStudio
            $VisualStudioProps

            Write-Output "${ExportSN}VS_DIR=${ExportSV}$($VisualStudioProps.InstallPath)${ExportEV}" > .ci/sd4/vsenv${ExportExt}
            Write-Output "${ExportSN}VS_VCVARSVER=${ExportSV}$($VisualStudioProps.VcVarsVer)${ExportEV}" >> .ci/sd4/vsenv${ExportExt}
            Write-Output "${ExportSN}VS_WINSDKVER=${ExportSV}$($VisualStudioProps.WinSdkVer)${ExportEV}" >> .ci/sd4/vsenv${ExportExt}
            Write-Output "${ExportSN}VS_MSVSPREFERENCE=${ExportSV}$($VisualStudioProps.MsvsPreference)${ExportEV}" >> .ci/sd4/vsenv${ExportExt}
            Write-Output "${ExportSN}VS_CMAKEGENERATOR=${ExportSV}$($VisualStudioProps.CMakeGenerator)${ExportEV}" >> .ci/sd4/vsenv${ExportExt}

            Write-Output "`$env:VS_DIR='$($VisualStudioProps.InstallPath)'" > .ci/sd4/vsenv.ps1
            Write-Output "`$env:VS_VCVARSVER='$($VisualStudioProps.VcVarsVer)'" >> .ci/sd4/vsenv.ps1
            Write-Output "`$env:VS_WINSDKVER='$($VisualStudioProps.WinSdkVer)'" >> .ci/sd4/vsenv.ps1
            Write-Output "`$env:VS_MSVSPREFERENCE='$($VisualStudioProps.MsvsPreference)'" >> .ci/sd4/vsenv.ps1
            Write-Output "`$env:VS_CMAKEGENERATOR='$($VisualStudioProps.CMakeGenerator)'" >> .ci/sd4/vsenv.ps1
        }

        # Link to hardcoded Visual Studio (Windows)
        if ("${env:vsstudio_dir}" -ne "") {
            Write-Output "${ExportSN}VS_DIR=${ExportSV}${env:vsstudio_dir}${ExportEV}" > .ci/sd4/vsenv${ExportExt}
            Write-Output "${ExportSN}VS_VCVARSVER=${ExportSV}${env:vsstudio_vcvarsver}${ExportEV}" >> .ci/sd4/vsenv${ExportExt}
            Write-Output "${ExportSN}VS_WINSDKVER=${ExportSV}${env:vsstudio_winsdkver}${ExportEV}" >> .ci/sd4/vsenv${ExportExt}
            Write-Output "${ExportSN}VS_MSVSPREFERENCE=${ExportSV}${env:vsstudio_msvspreference}${ExportEV}" >> .ci/sd4/vsenv${ExportExt}
            Write-Output "${ExportSN}VS_CMAKEGENERATOR=${ExportSV}${env:vsstudio_cmakegenerator}${ExportEV}" >> .ci/sd4/vsenv${ExportExt}

            Write-Output "`$env:VS_DIR='${env:vsstudio_dir}'" > .ci/sd4/vsenv.ps1
            Write-Output "`$env:VS_VCVARSVER='${env:vsstudio_vcvarsver}'" >> .ci/sd4/vsenv.ps1
            Write-Output "`$env:VS_WINSDKVER='${env:vsstudio_winsdkver}'" >> .ci/sd4/vsenv.ps1
            Write-Output "`$env:VS_MSVSPREFERENCE='${env:vsstudio_msvspreference}'" >> .ci/sd4/vsenv.ps1
            Write-Output "`$env:VS_CMAKEGENERATOR='${env:vsstudio_cmakegenerator}'" >> .ci/sd4/vsenv.ps1
        }

        '@
        Set-Content -Path ".ci\sd4\config-vsstudio.ps1" -Encoding Unicode -Value $Content

        $Content = @'
        @ECHO OFF

        REM The OCaml dkml-base-compiler will compile fine but any other
        REM packages (ocamlbuild, etc.) which
        REM need a native compiler will fail without the MSVC compiler in the
        REM PATH. There isn't a `with-dkml.exe` alternative available at
        REM this stage of the GitHub workflow.
        SET VSCMD_DEBUG=2
        SET VSCMD_SKIP_SENDTELEMETRY=1
        call "%VS_DIR%\Common7\Tools\VsDevCmd.bat" -no_logo -host_arch=%vsstudio_hostarch% -arch=%vsstudio_arch% -vcvars_ver=%VS_VCVARSVER% -winsdk=%VS_WINSDKVER%
        if %ERRORLEVEL% neq 0 (
            echo.
            echo.The "%VS_DIR%\Common7\Tools\VsDevCmd.bat" command failed
            echo.with exit code %ERRORLEVEL%.
            echo.
            exit /b %ERRORLEVEL%
        )

        REM VsDevCmd.bat turns off echo; be explicit if we want it on or off
        @echo OFF

        REM MSVC environment variables in Unix format.
        echo %PATH% > .ci\sd4\msvcpath


        REM * We can't use `msys2 -c` directly to query for all MSVC environment variables
        REM   because it stomps over the PATH. So we are inside a Batch script to do the query.
        msys2 -c "set | grep -v '^PATH=' | awk -f .ci/sd4/msvcenv.awk > .ci/sd4/msvcenv"

        REM (For some reason no shell commands can happen after the last msys2 -c in GitHub Actions
        REM so split into multiple steps!
        '@
        Set-Content -Path ".ci\sd4\get-msvcpath-into-msys2.bat" -Encoding Default -Value $Content

    - name: Prepare cache keys
      # An undocumented bug with GitHub Actions is that a space in the key
      # will "succeed" but it never gets restored. So we will hash a
      # user-friendly file instead.
      shell: bash
      run: |
        set -x
        echo 'ca9ca1-${{ steps.full_matrix_vars.outputs.dkml_host_abi }}-${{ steps.full_matrix_vars.outputs.dkml_target_abi }}' > .ci/sd4/cachekey.opam.binaries
        echo '${{ steps.full_matrix_vars.outputs.abi_pattern }}-${{ steps.full_matrix_vars.outputs.vsstudio_arch }}-${{ steps.full_matrix_vars.outputs.vsstudio_hostarch }}-${{ steps.full_matrix_vars.outputs.vsstudio_dir }}-${{ steps.full_matrix_vars.outputs.vsstudio_vcvarsver }}-${{ steps.full_matrix_vars.outputs.vsstudio_winsdkver }}-${{ steps.full_matrix_vars.outputs.vsstudio_msvspreference }}-${{ steps.full_matrix_vars.outputs.vsstudio_cmakegenerator }}' > .ci/sd4/cachekey.vsstudio
        echo '${{ inputs.OCAML_COMPILER }}-${{ inputs.DISKUV_OPAM_REPOSITORY }}-${{ inputs.DKML_COMPILER }}-${{ inputs.CONF_DKML_CROSS_TOOLCHAIN }}' > .ci/sd4/cachekey.ci.inputs

    # Bootstrapping Opam

    - name: Cache Opam bootstrap by OS
      uses: actions/cache@v4
      id: cache-sd4-bs
      with:
        path: .ci/sd4/bs
        key:
          "1_${{ inputs.CACHE_PREFIX }}_${{ runner.os }}-sd4-bs-${{ hashFiles('.ci/sd4/cachekey.opam.binaries') }}"

    - name: Cache Opam root by (host,target)
      uses: actions/cache@v4
      id: cache-sd4-opamroot
      with:
        path: |
          ${{ steps.full_matrix_vars.outputs.opam_root_cacheable }}/config
          ${{ steps.full_matrix_vars.outputs.opam_root_cacheable }}/opam-init
          ${{ steps.full_matrix_vars.outputs.opam_root_cacheable }}/dkml
          ${{ steps.full_matrix_vars.outputs.opam_root_cacheable }}/two
          ${{ steps.full_matrix_vars.outputs.opam_root_cacheable }}/repo
          ${{ steps.full_matrix_vars.outputs.opam_root_cacheable }}/download-cache
          ${{ steps.full_matrix_vars.outputs.opam_root_cacheable }}/.ci.root-init
          ${{ steps.full_matrix_vars.outputs.opam_root_cacheable }}/.ci.dkml.repo-init
          ${{ steps.full_matrix_vars.outputs.opam_root_cacheable }}/.ci.two.repo-init
        key:
          "1_${{ inputs.CACHE_PREFIX }}_${{ env.DKML_VERSION }}_${{ steps.full_matrix_vars.outputs.abi_pattern }}-sd4-opamroot-${{ hashFiles('.ci/sd4/cachekey.opam.binaries') }}-${{ hashFiles('cachekey.ci.inputs') }}"

    # The action/checkout steps used for pinning will re-use existing Git objects
    # because of caching
    - name: Cache Git checkouts of Opam pins by OS
      uses: actions/cache@v4
      id: cache-sd4-git
      with:
        path: .ci/sd4/g
        key:
          "1_${{ inputs.CACHE_PREFIX }}_${{ runner.os }}-sd4-git-${{ hashFiles('.ci/sd4/cachekey.ci.inputs') }}"

    # Checkout code

    - name: Checkout DkML code
      shell: bash
      env:
        # Push down inputs variables for GitHub/GitLab portable scripts
        VERBOSE:                        "${{ inputs.VERBOSE }}"
        PIN_DKML_RUNTIME_DISTRIBUTION:  "2.1.4"
      run: 'sh .ci/sd4/run-checkout-code.sh GITHUB_WORKSPACE "$GITHUB_WORKSPACE"'

    # Setup C compiler

    - name: Cache Visual Studio environment variables by (host,target)
      uses: actions/cache@v4
      id: cache-sd4-vsenv
      with:
        path: .ci/sd4/vsenv.github
        key: "1_${{ inputs.CACHE_PREFIX }}_sd4-vsenv-${{ hashFiles('cachekey.vsstudio') }}"

    - name: Configure Visual Studio (Windows)
      shell: pwsh
      run: |
        .ci\sd4\config-vsstudio.ps1

    - name: Export Visual Studio location and type (Windows)
      shell: pwsh
      run: |
        Get-Content ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv.github
        Get-Content ${env:GITHUB_WORKSPACE}/.ci/sd4/vsenv.github >> $env:GITHUB_ENV

    - name: Capture Visual Studio compiler environment (1/2) (Windows)
      shell: cmd
      run: |
        call .ci\sd4\get-msvcpath-into-msys2.bat

    - name: Capture Visual Studio compiler environment (2/2) (Windows)
      shell: msys2 {0}
      run: |
        #!/bin/sh
        set -euf
        cat .ci/sd4/msvcpath | tr -d '\r' | cygpath --path -f - | awk -f .ci/sd4/msvcpath.awk >> .ci/sd4/msvcenv

        tail -n100 .ci/sd4/msvcpath .ci/sd4/msvcenv >&2

    - name: Compile 'dkml' switch
      shell: msys2 {0}
      env:
        # Push down inputs variables for GitHub/GitLab portable scripts
        #   When non-empty, instead of building the standard components from the
        #   central Opam repository, use the github/gitlab development repositories
        #   directly.
        FDOPEN_OPAMEXE_BOOTSTRAP:         "${{ inputs.FDOPEN_OPAMEXE_BOOTSTRAP }}"
        CONF_DKML_CROSS_TOOLCHAIN:        "${{ inputs.CONF_DKML_CROSS_TOOLCHAIN }}"
        DISKUV_OPAM_REPOSITORY:           "${{ inputs.DISKUV_OPAM_REPOSITORY }}"
        DKML_COMPILER:                    "${{ inputs.DKML_COMPILER }}"
        OCAML_COMPILER:                   "${{ inputs.OCAML_COMPILER }}"
        SECONDARY_SWITCH:                 "${{ inputs.SECONDARY_SWITCH }}"
        VERBOSE:                          "${{ inputs.VERBOSE }}"

        # autogen from global_env_vars.
        DKML_VERSION: '2.1.4'
        DEFAULT_DISKUV_OPAM_REPOSITORY_TAG: '2.1.4'
        DEFAULT_OCAML_OPAM_REPOSITORY_TAG: '98ac0a55cd7b45747207396a0b8fe1cc619b4a14'
        DEFAULT_DKML_COMPILER: '2.1.4'
        BOOTSTRAP_OPAM_VERSION: '2.2.1'
        PIN_MLFRONT_UNPACK: '2.1.4'
        PIN_ANGSTROM_LWT_UNIX: '0.16.1'
        PIN_ANGSTROM: '0.16.0'
        PIN_ASTRING: '0.8.5'
        PIN_BASE: 'v0.16.1'
        PIN_BASE64: '3.5.1'
        PIN_BIGARRAY_COMPAT: '1.1.0'
        PIN_BIGSTRINGAF: '0.10.0'
        PIN_BOS: '0.2.1'
        PIN_CAMLP_STREAMS: '5.0.1'
        PIN_CHROME_TRACE: '3.15.0'
        PIN_CMDLINER: '1.3.0'
        PIN_CONF_BASH: '1'
        PIN_CONF_DKML_SYS_OPAM: '1'
        PIN_CONF_DKSDK: '1'
        PIN_CONF_PKG_CONFIG: '3+cpkgs'
        PIN_CONF_SDL2: '1'
        PIN_CONF_SQLITE3: '3.1+cpkgs'
        PIN_CPPO: '1.6.9'
        PIN_CRUNCH: '3.3.1'
        PIN_CSEXP: '1.5.2'
        PIN_CSTRUCT: '6.2.0'
        PIN_CTYPES_FOREIGN: '0.19.2-windowssupport-r8'
        PIN_CTYPES: '0.19.2-windowssupport-r8'
        PIN_CUDF: '0.10'
        PIN_DAP: '1.0.6'
        PIN_DIGESTIF: '1.2.0'
        PIN_DISKUVBOX: '0.2.0'
        PIN_DKML_APPS: '2.1.4'
        PIN_DKML_BASE_COMPILER: '4.14.2~v2.1.4'
        PIN_DKML_BUILD_DESKTOP: '2.1.4'
        PIN_DKML_C_PROBE: '3.0.0'
        PIN_DKML_COMPILER_SRC: '2.1.4'
        PIN_DKML_COMPONENT_XX_CONSOLE: '0.1.1'
        PIN_DKML_EXE_LIB: '2.1.4'
        PIN_DKML_EXE: '2.1.4'
        PIN_DKML_HOST_ABI_WINDOWS_X86_64: '1'
        PIN_DKML_HOST_ABI: '1'
        PIN_DKML_INSTALL_INSTALLER: '0.5.3'
        PIN_DKML_INSTALL_RUNNER: '0.5.3'
        PIN_DKML_INSTALL: '0.5.3'
        PIN_DKML_INSTALLER_OCAML_COMMON: '2.1.3'
        PIN_DKML_OPTION_BX32: '1'
        PIN_DKML_PACKAGE_CONSOLE: '0.5.3'
        PIN_DKML_RUNTIME_COMMON_NATIVE: '2.1.1'
        PIN_DKML_RUNTIME_COMMON: '2.1.4'
        PIN_DKML_RUNTIME_DISTRIBUTION: '2.1.4'
        PIN_DKML_RUNTIMELIB: '2.1.4'
        PIN_DKML_RUNTIMESCRIPTS: '2.1.4'
        PIN_DKML_TARGET_ABI_ANY: '1'
        PIN_DKML_TARGET_ABI_WINDOWS_X86_64: '1'
        PIN_DKML_WORKFLOWS: '2.1.4'
        PIN_DUNE_ACTION_PLUGIN: '3.15.0'
        PIN_DUNE_BUILD_INFO: '3.15.0'
        PIN_DUNE_CONFIGURATOR: '3.15.0'
        PIN_DUNE_GLOB: '3.15.0'
        PIN_DUNE_PRIVATE_LIBS: '3.15.0'
        PIN_DUNE_RPC_LWT: '3.15.0'
        PIN_DUNE_RPC: '3.15.0'
        PIN_DUNE_SITE: '3.15.0'
        PIN_DUNE: '3.15.0'
        PIN_DYN: '3.15.0'
        PIN_EARLYBIRD: '1.3.2+dkml-4_14-backport-linearclosures'
        PIN_EITHER: '1.0.0'
        PIN_EQAF: '0.9'
        PIN_EXTLIB: '1.7.9'
        PIN_FEATHER: '0.3.0'
        PIN_FIBER: '3.7.0'
        PIN_FIX: '20230505'
        PIN_FMT: '0.9.0'
        PIN_FPATH: '0.7.3'
        PIN_GRAPHICS: '5.1.2'
        PIN_HMAP: '0.8.1'
        PIN_HOST_ARCH_X86_64: '1'
        PIN_INTEGERS: '0.7.0'
        PIN_IOSTREAM: '0.2.2'
        PIN_ITER: '1.9'
        PIN_JANE_STREET_HEADERS: 'v0.16.0'
        PIN_JINGOO: '1.5.0'
        PIN_JSONRPC: '1.17.0'
        PIN_JST_CONFIG: 'v0.16.0'
        PIN_LAMBDA_TERM: '3.3.2'
        PIN_LOGS: '0.7.0'
        PIN_LRU: '0.3.1'
        PIN_LSP: '1.17.0'
        PIN_LWT: '5.7.0'
        PIN_LWT_PPX: '5.9.1'
        PIN_LWT_REACT: '1.2.0'
        PIN_MCCS: '1.1+13'
        PIN_MDX: '2.4.1'
        PIN_MENHIR: '20231231'
        PIN_MENHIRCST: '20231231'
        PIN_MENHIRLIB: '20231231'
        PIN_MENHIRSDK: '20231231'
        PIN_MERLIN_LIB: '4.14-414'
        PIN_METAPP: '0.4.4+win'
        PIN_METAQUOT: '0.5.2'
        PIN_MEW: '0.1.0'
        PIN_MEW_VI: '0.5.0'
        PIN_MSYS2_CLANG64: '1'
        PIN_MSYS2: '0.1.0+dkml'
        PIN_NUM: '1.5'
        PIN_OCAML_COMPILER_LIBS: 'v0.12.4'
        PIN_OCAML_LSP_SERVER: '1.17.0'
        PIN_OCAML_SYNTAX_SHIMS: '1.0.0'
        PIN_OCAML_VERSION: '3.6.5'
        PIN_OCAML: '4.14.2'
        PIN_OCAMLBUILD: '0.14.2+win+unix'
        PIN_OCAMLC_LOC: '3.15.0'
        PIN_OCAMLFIND: '1.9.5'
        PIN_OCAMLFORMAT_LIB: '0.26.1'
        PIN_OCAMLFORMAT_RPC_LIB: '0.26.1'
        PIN_OCAMLFORMAT: '0.26.1'
        PIN_OCP_INDENT: '1.8.2-windowssupport'
        PIN_OCPLIB_ENDIAN: '1.2'
        PIN_ODOC_PARSER: '2.4.1'
        PIN_ODOC: '2.4.1'
        PIN_ORDERING: '3.15.0'
        PIN_PARSEXP: 'v0.16.0'
        PIN_PATH_GLOB: '0.3'
        PIN_POSIXAT: 'v0.16.0'
        PIN_PP: '1.2.0'
        PIN_PPX_ASSERT: 'v0.16.0'
        PIN_PPX_BASE: 'v0.16.0'
        PIN_PPX_COLD: 'v0.16.0'
        PIN_PPX_COMPARE: 'v0.16.0'
        PIN_PPX_DERIVERS: '1.2.1'
        PIN_PPX_DERIVING: '5.2.1'
        PIN_PPX_DERIVING_YOJSON: '3.9.1'
        PIN_PPX_ENUMERATE: 'v0.16.0'
        PIN_PPX_EXPECT: 'v0.16.0'
        PIN_PPX_GLOBALIZE: 'v0.16.0'
        PIN_PPX_HASH: 'v0.16.0'
        PIN_PPX_HERE: 'v0.16.0'
        PIN_PPX_IGNORE_INSTRUMENTATION: 'v0.16.0'
        PIN_PPX_INLINE_TEST: 'v0.16.1'
        PIN_PPX_OPTCOMP: 'v0.16.0'
        PIN_PPX_PIPEBANG: 'v0.16.0'
        PIN_PPX_SEXP_CONV: 'v0.16.0'
        PIN_PPX_YOJSON_CONV_LIB: 'v0.16.0'
        PIN_PPXLIB: '0.30.0'
        PIN_PSQ: '0.2.1'
        PIN_PTIME: '1.1.0'
        PIN_QRC: '0.1.1~dune'
        PIN_RE: '1.11.0'
        PIN_REACT: '1.2.2'
        PIN_REFL: '0.4.1'
        PIN_RESULT: '1.5'
        PIN_RRESULT: '0.7.0'
        PIN_SEQ: 'base'
        PIN_SEXPLIB: 'v0.16.0'
        PIN_SEXPLIB0: 'v0.16.0'
        PIN_SHA: '1.15.4'
        PIN_SHEXP: 'v0.16.0'
        PIN_SPAWN: 'v0.15.1'
        PIN_SQLITE3: '5.2.0'
        PIN_STDCOMPAT: '19+optautoconf'
        PIN_STDIO: 'v0.16.0'
        PIN_STDLIB_SHIMS: '0.3.0'
        PIN_STDUNE: '3.15.0'
        PIN_STRINGEXT: '1.6.0'
        PIN_TIME_NOW: 'v0.16.0'
        PIN_TINY_HTTPD: '0.16'
        PIN_TOPKG: '1.0.7'
        PIN_TRAVERSE: '0.3.0'
        PIN_TRIE: '1.0.0'
        PIN_TSORT: '2.1.0'
        PIN_TYXML: '4.6.0'
        PIN_UCHAR: '0.0.2'
        PIN_URI: '4.4.0'
        PIN_UTOP: '2.13.1'
        PIN_UUCP: '15.0.0'
        PIN_UUIDM: '0.9.8'
        PIN_UUSEG: '15.0.0'
        PIN_UUTF: '1.0.3'
        PIN_WITH_DKML: '2.1.4'
        PIN_XDG: '3.15.0'
        PIN_YOJSON: '2.1.2'
        PIN_ZED: '3.2.3'
      run: |
        sh .ci/sd4/run-setup-dkml.sh GITHUB_WORKSPACE "$GITHUB_WORKSPACE"

        #   During cache read (the "Cache Opam root by (host,target)" step) we get:
        #      Cache Size: ~212 MB (222698916 B)
        #      C:\Windows\System32\tar.exe -z -xf D:/a/_temp/9b656ed6-e727-4499-b4f8-b34d5979d42b/cache.tgz -P -C D:/a/dkml-workflows-regular-example/dkml-workflows-regular-example
        #      ../../.opam/download-cache/md5/65/65e6dc9b305ccbed1267275fe180f538: Can't create '\\\\?\\D:\\a\\dkml-workflows-regular-example\\dkml-workflows-regular-example\\..\\..\\.opam\\download-cache\\md5\\65\\65e6dc9b305ccbed1267275fe180f538'
        #      ../../.opam/download-cache/md5/63/63b2ecad76cf56102074f3203fc8c0be: Can't create '\\\\?\\D:\\a\\dkml-workflows-regular-example\\dkml-workflows-regular-example\\..\\..\\.opam\\download-cache\\md5\\63\\63b2ecad76cf56102074f3203fc8c0be'
        #      tar.exe: Error exit delayed from previous errors.
        #      Warning: Failed to restore: Tar failed with error: The process 'C:\Windows\System32\tar.exe' failed with exit code 1
        #      Cache not found for input keys: v1_win32-windows_x86-sd4-opamroot-f674af417c46862703911bc9aee57c19d6c436776c657533610dc233fae8e8af-5850674459249f5d9ea150785baa5177201737ce2c7d59834aa7457c06c929e7
        #   So get rid of Opam's md5 download cache.
        rm -rf "${opam_root}/download-cache/md5"

        # Expose opamrun to remaining GitHub Action steps
        opamrunabs="$GITHUB_WORKSPACE/.ci/sd4/opamrun"
        if [ -x /usr/bin/cygpath ]; then opamrunabs=$(/usr/bin/cygpath -aw "$opamrunabs"); fi
        echo "$opamrunabs" >> $GITHUB_PATH

        #   Special case: GITHUB_PATH does not influence msys2.bat of msys2/setup-msys2@v2, so place in real MSYS2 PATH
        if [ -n "${MSYSTEM:-}" ]; then
          install -d /usr/local/bin
          install -v .ci/sd4/opamrun/opamrun /usr/local/bin/opamrun
        fi
