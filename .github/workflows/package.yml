name: Package OCaml Releases

on:
  workflow_dispatch:
    inputs:
      dkml-install-api:
        description: "Git branch, tag or commit for dkml-install, dkml-install-runner and dkml-package-console"
        required: false
        default: "" # Change this to "@repository@" once published to Opam
      dkml-compiler:
        description: "Git branch, tag or commit for dkml-base-compiler"
        required: false
        default: "" # Change this to "@repository@" once published to Opam
      dkml-component-ocamlcompiler:
        description: "Git branch, tag or commit for dkml-component-*-ocamlcompiler"
        required: false
        default: "" # Change this to "@repository@" once published to Opam
      dkml-component-ocamlrun:
        description: "Git branch, tag or commit for dkml-component-*-ocamlrun"
        required: false
        default: "" # Change this to "@repository@" once published to Opam
      dkml-component-opam:
        description: "Git branch, tag or commit for dkml-component-*-opam"
        required: false
        default: "" # Change this to "@repository@" once published to Opam
      dkml-component-curl:
        description: "Git branch, tag or commit for dkml-component-*-curl package"
        required: false
        default: "" # Change this to "@repository@" once published to Opam
      dkml-component-unixutils:
        description: "Git branch, tag or commit for dkml-component-*-unixutils packages"
        required: false
        default: "" # Change this to "@repository@" once published to Opam
      conf-dkml-cross-toolchain:
        description: "Git branch, tag or commit for conf-dkml-cross-toolchain"
        required: false
        default: "" # Change this to "@repository@" once published to Opam
      diskuv-opam-repository:
        # Used by all_setup_opam_repositories.sh
        description: "Git branch, tag or commit for the diskuv-opam-repository repository"
        required: false
        default: "" # DEFAULT_DISKUV_OPAM_REPOSITORY_TAG in setup-dkml is used as default for empty strings
  push:
    branches:
      - 'main'
    tags:
      # Any push to a tag that starts with 'v'
      - v*

env:
  #=== ERROR while compiling alcotest.1.5.0 =====================================#
  # context              2.0.10 | win32/x86_64 |  | https://opam.ocaml.org#173f1aaf
  # ...
  #           cl src/alcotest/alcotest_stubs.obj (exit 2)
  # (cd _build/default/src/alcotest && "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.25.28610\bin\HostX64\x64\cl.exe" -nologo -O2 -Gy- -MD -D_CRT_SECURE_NO_DEPRECATE -nologo -O2 -Gy- -MD -I D:/.opam/dkml/lib/ocaml -I D:\.opam\dkml\lib\astring -I D:\.opam\dkml\lib\fmt -I ../alcotest-engine /Foalcotest_stubs.obj -c alcotest_stubs.c)
  # alcotest_stubs.c
  # alcotest_stubs.c(4): fatal error C1083: Cannot open include file: 'unistd.h': No such file or directory  
  PIN_ALCOTEST: 1.4.0

jobs:
  setup-dkml:
    uses: 'diskuv/dkml-workflows/.github/workflows/setup-dkml.yml@v0'
    with:
      ocaml-compiler: 4.12.1
      fdopen-opamexe-bootstrap: true # true = Use opam.exe from fdopen's site on Windows. Temporary mitigation until a transient bug is fixed.
      dkml-compiler: ${{ github.event.inputs.dkml-compiler }}
      conf-dkml-cross-toolchain: ${{ github.event.inputs.conf-dkml-cross-toolchain }}
      diskuv-opam-repository: ${{ github.event.inputs.diskuv-opam-repository }}

  build:
    # Wait until `setup-dkml` is finished
    needs: setup-dkml

    # Five (5) build environments will be available. You can include
    # all of them or a subset of them.
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
            abi-pattern: win32-windows_x86
            dkml-host-abi: windows_x86
            opam-root: D:/.opam
            default_shell: msys2 {0}
          - os: windows-2019
            abi-pattern: win32-windows_x86_64
            dkml-host-abi: windows_x86_64
            opam-root: D:/.opam
            default_shell: msys2 {0}
          - os: macos-latest
            abi-pattern: macos-darwin_all
            dkml-host-abi: darwin_x86_64
            opam-root: /Users/runner/.opam
            default_shell: sh
          - os: ubuntu-latest
            abi-pattern: manylinux2014-linux_x86
            dkml-host-abi: linux_x86
            opam-root: .ci/opamroot
            default_shell: sh
          - os: ubuntu-latest
            abi-pattern: manylinux2014-linux_x86_64
            dkml-host-abi: linux_x86_64
            opam-root: .ci/opamroot
            default_shell: sh

    runs-on: ${{ matrix.os }}
    name: build / ${{ matrix.abi-pattern }}

    # Use a Unix shell by default, even on Windows
    defaults:
      run:
        shell: ${{ matrix.default_shell }}

    env:
      # When non-empty, instead of building the standard components from the
      # central Opam repository, use the github/gitlab development repositories
      # directly.
      DKML_COMPONENT_STAGING_CURL:          "${{ github.event.inputs.dkml-component-curl }}"
      DKML_COMPONENT_NETWORK_OCAMLCOMPILER: "${{ github.event.inputs.dkml-component-ocamlcompiler }}"
      DKML_COMPONENT_STAGING_OCAMLRUN:      "${{ github.event.inputs.dkml-component-ocamlrun }}"
      DKML_COMPONENT_STAGING_OPAM:          "${{ github.event.inputs.dkml-component-opam }}"
      # These are not independent of dkml-install-api; they reside in same
      # repository; we cannot go over max 10 GitHub workflow inputs.
      DKML_INSTALL:                     "${{ github.event.inputs.dkml-install-api }}"
      DKML_INSTALL_RUNNER:              "${{ github.event.inputs.dkml-install-api }}"
      DKML_PACKAGE_CONSOLE:             "${{ github.event.inputs.dkml-install-api }}"
      DKML_COMPONENT_XX_CONSOLE:        "${{ github.event.inputs.dkml-install-api }}"
      # These are not independent of dkml-component-enduser-ocamlcompiler; they reside in same
      # repository; we cannot go over max 10 GitHub workflow inputs.
      DKML_COMPONENT_STAGING_UNIXUTILS: "${{ github.event.inputs.dkml-component-enduser-unixutils }}"
      DKML_COMPONENT_NETWORK_UNIXUTILS: "${{ github.event.inputs.dkml-component-enduser-unixutils }}"
      DKML_COMPONENT_OFFLINE_UNIXUTILS: "${{ github.event.inputs.dkml-component-enduser-unixutils }}"

      # Remove warnings
      HOMEBREW_NO_INSTALL_CLEANUP: 1

    steps:
      # BOILERPLATE START: setup-dkml
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install MSYS2 to provide Unix shell (Windows only)
        if: startsWith(matrix.dkml-host-abi, 'windows')
        uses: msys2/setup-msys2@v2
        with:
          msystem: MSYS
          update: true
          install: >-
            tree
            wget
            make
            pkg-config
            rsync
            diffutils
            patch
            unzip
            git
            xz
            tar

      - name: Download setup-dkml artifacts
        uses: actions/download-artifact@v3
        with:
          path: .ci/dist

      - name: Import build environments from setup-dkml
        run: |
          ${{ needs.setup-dkml.outputs.import_func }}
          import ${{ matrix.abi-pattern }}

      - name: Cache Opam downloads by host
        uses: actions/cache@v2
        with:
          path: ${{ matrix.opam-root }}/download-cache
          key: ${{ matrix.dkml-host-abi }}
      # BOILERPLATE END: setup-dkml

      # The action/checkout steps used for pinning will re-use existing Git objects
      # because of caching
      - name: Cache Git checkouts of Opam pins by OS
        uses: actions/cache@v2
        with:
          path: .ci/g
          key: ${{ runner.os }}-gitpin

      # dkml-component-staging-opam

      - name: Checkout dkml-component-staging-opam
        if: ${{ env.DKML_COMPONENT_STAGING_OPAM != '@repository@' }}
        uses: actions/checkout@v3
        with:
          repository: diskuv/dkml-component-opam
          path: .ci/g/dkml-component-staging-opam
          ref: ${{ env.DKML_COMPONENT_STAGING_OPAM }} # empty is no `ref`, which is default branch

      - name: Pin dkml-component-staging-opam32 and dkml-component-staging-opam64 to checkout instead of Opam repository
        if: ${{ env.DKML_COMPONENT_STAGING_OPAM != '@repository@' }}
        run: |
          opamrun pin add --yes --no-action dkml-component-staging-opam32 .ci/g/dkml-component-staging-opam
          opamrun pin add --yes --no-action dkml-component-staging-opam64 .ci/g/dkml-component-staging-opam

      # dkml-component-staging-ocamlrun

      - name: Checkout dkml-component-staging-ocamlrun
        if: ${{ env.DKML_COMPONENT_STAGING_OCAMLRUN != '@repository@' }}
        uses: actions/checkout@v3
        with:
          repository: diskuv/dkml-component-ocamlrun
          path: .ci/g/dkml-component-staging-ocamlrun
          ref: ${{ env.DKML_COMPONENT_STAGING_OCAMLRUN }} # empty is no `ref`, which is default branch

      - name: Pin dkml-component-staging-ocamlrun to checkout instead of Opam repository
        if: ${{ env.DKML_COMPONENT_STAGING_OCAMLRUN != '@repository@' }}
        run: opamrun pin add --yes --no-action dkml-component-staging-ocamlrun .ci/g/dkml-component-staging-ocamlrun

      # dkml-component-network-ocamlcompiler

      - name: Checkout dkml-component-network-ocamlcompiler
        if: ${{ env.DKML_COMPONENT_NETWORK_OCAMLCOMPILER != '@repository@' }}
        uses: actions/checkout@v3
        with:
          repository: diskuv/dkml-component-ocamlcompiler
          path: .ci/g/dkml-component-network-ocamlcompiler
          ref: ${{ env.DKML_COMPONENT_NETWORK_OCAMLCOMPILER }} # empty is no `ref`, which is default branch

      - name: Pin dkml-component-network-ocamlcompiler to checkout instead of Opam repository
        if: ${{ env.DKML_COMPONENT_NETWORK_OCAMLCOMPILER != '@repository@' }}
        run: opamrun pin add --yes --no-action dkml-component-network-ocamlcompiler .ci/g/dkml-component-network-ocamlcompiler

      # dkml-install

      - name: Checkout dkml-install
        if: ${{ env.DKML_INSTALL != '@repository@' }}
        uses: actions/checkout@v3
        with:
          repository: diskuv/dkml-install-api
          path: .ci/g/dkml-install
          ref: ${{ env.DKML_INSTALL }} # empty is no `ref`, which is default branch

      - name: Pin dkml-install to checkout instead of Opam repository
        if: ${{ env.DKML_INSTALL != '@repository@' }}
        run: opamrun pin add --yes --no-action dkml-install .ci/g/dkml-install

      #  dkml-install-runner

      - name: Checkout dkml-install-runner
        if: ${{ env.DKML_INSTALL_RUNNER != '@repository@' }}
        uses: actions/checkout@v3
        with:
          repository: diskuv/dkml-install-api
          path: .ci/g/dkml-install-runner
          ref: ${{ env.DKML_INSTALL_RUNNER }} # empty is no `ref`, which is default branch

      - name: Pin dkml-install-runner to checkout instead of Opam repository
        if: ${{ env.DKML_INSTALL_RUNNER != '@repository@' }}
        run: opamrun pin add --yes --no-action dkml-install-runner .ci/g/dkml-install-runner

      #  dkml-package-console

      - name: Checkout dkml-package-console
        if: ${{ env.DKML_PACKAGE_CONSOLE != '@repository@' }}
        uses: actions/checkout@v3
        with:
          repository: diskuv/dkml-install-api
          path: .ci/g/dkml-package-console
          ref: ${{ env.DKML_PACKAGE_CONSOLE }} # empty is no `ref`, which is default branch

      - name: Pin dkml-package-console to checkout instead of Opam repository
        if: ${{ env.DKML_PACKAGE_CONSOLE != '@repository@' }}
        run: opamrun pin add --yes --no-action dkml-package-console .ci/g/dkml-package-console

      #  dkml-component-xx-console

      - name: Checkout dkml-component-xx-console
        if: ${{ env.DKML_COMPONENT_XX_CONSOLE != '@repository@' }}
        uses: actions/checkout@v3
        with:
          repository: diskuv/dkml-install-api
          path: .ci/g/dkml-component-xx-console
          ref: ${{ env.DKML_COMPONENT_XX_CONSOLE }} # empty is no `ref`, which is default branch

      - name: Pin dkml-component-xx-console to checkout instead of Opam repository
        if: ${{ env.DKML_COMPONENT_XX_CONSOLE != '@repository@' }}
        run: opamrun pin add --yes --no-action dkml-component-xx-console .ci/g/dkml-component-xx-console

      # dkml-component-staging-curl

      - name: Checkout dkml-component-staging-curl
        if: ${{ env.DKML_COMPONENT_STAGING_CURL != '@repository@' }}
        uses: actions/checkout@v3
        with:
          repository: diskuv/dkml-component-curl
          path: .ci/g/dkml-component-staging-curl
          ref: ${{ env.DKML_COMPONENT_STAGING_CURL }} # empty is no `ref`, which is default branch

      - name: Pin dkml-component-staging-curl to checkout instead of Opam repository
        if: ${{ env.DKML_COMPONENT_STAGING_CURL != '@repository@' }}
        run: opamrun pin add --yes --no-action dkml-component-staging-curl .ci/g/dkml-component-staging-curl

      # dkml-component-staging-unixutils

      - name: Checkout dkml-component-staging-unixutils
        if: ${{ env.DKML_COMPONENT_STAGING_UNIXUTILS != '@repository@' }}
        uses: actions/checkout@v3
        with:
          repository: diskuv/dkml-component-unixutils
          path: .ci/g/dkml-component-staging-unixutils
          ref: ${{ env.DKML_COMPONENT_STAGING_UNIXUTILS }} # empty is no `ref`, which is default branch

      - name: Pin dkml-component-staging-unixutils to checkout instead of Opam repository
        if: ${{ env.DKML_COMPONENT_STAGING_UNIXUTILS != '@repository@' }}
        run: opamrun pin add --yes --no-action dkml-component-staging-unixutils .ci/g/dkml-component-staging-unixutils

      # dkml-component-network-unixutils

      - name: Checkout dkml-component-network-unixutils
        if: ${{ env.DKML_COMPONENT_NETWORK_UNIXUTILS != '@repository@' }}
        uses: actions/checkout@v3
        with:
          repository: diskuv/dkml-component-unixutils
          path: .ci/g/dkml-component-network-unixutils
          ref: ${{ env.DKML_COMPONENT_NETWORK_UNIXUTILS }} # empty is no `ref`, which is default branch

      - name: Pin dkml-component-network-unixutils to checkout instead of Opam repository
        if: ${{ env.DKML_COMPONENT_NETWORK_UNIXUTILS != '@repository@' }}
        run: opamrun pin add --yes --no-action dkml-component-network-unixutils .ci/g/dkml-component-network-unixutils

      # dkml-component-offline-unixutils

      - name: Checkout dkml-component-offline-unixutils
        if: ${{ env.DKML_COMPONENT_OFFLINE_UNIXUTILS != '@repository@' }}
        uses: actions/checkout@v3
        with:
          repository: diskuv/dkml-component-unixutils
          path: .ci/g/dkml-component-offline-unixutils
          ref: ${{ env.DKML_COMPONENT_OFFLINE_UNIXUTILS }} # empty is no `ref`, which is default branch

      - name: Pin dkml-component-offline-unixutils to checkout instead of Opam repository
        if: ${{ env.DKML_COMPONENT_OFFLINE_UNIXUTILS != '@repository@' }}
        run: opamrun pin add --yes --no-action dkml-component-offline-unixutils .ci/g/dkml-component-offline-unixutils

      # version pins
      - name: Pins for packages to work on all OSes including Windows
        run: |
          opamrun pin add --yes --no-action -k version alcotest ${{ env.PIN_ALCOTEST }}

      # BOILERPLATE START: setup-dkml
      - name: Package up the installer
        # Because of the error on manylinux2014 (CentOS 7):
        #   No solution found, exiting
        #   - conf-pkg-config
        #   depends on the unavailable system package 'pkgconfig'.
        # we use `--no-depexts`. The dockcross manylinux2014 has package names
        # pkgconfig.i686 and pkgconfig.x86_64, it does not seem to match what
        # opam 2.1.0 is looking for ("pkgconfig").
        # `conf-pkg-config` is needed by `dkml-component-staging-unixutils` ->
        # `digestif`
        run: |
          #!/bin/sh
          set -euf
          case "${{ matrix.dkml-host-abi }}" in
            linux_*) opamrun install ./dkml-installer-network-ocaml.opam --with-test --yes --no-depexts ;;
            *) opamrun install ./dkml-installer-network-ocaml.opam --with-test --yes ;;
          esac

          # Examine the installer
          _share=$(opamrun var dkml-installer-network-ocaml:share)
          opamrun install diskuvbox --yes
          opamrun exec -- diskuvbox tree -d 6 --encoding UTF-8 "$_share"

          # Finalize and distribute the Console installer (each type of installer has its unique finalization procedure)
          install -d dist
          case "${{ matrix.dkml-host-abi }}" in
            linux_*)
              opamrun exec -- "$_share"/t/bundle-diskuv-ocaml-"${{ matrix.dkml-host-abi }}".sh -o dist -e .tar.gz tar --gzip
              ;;
            darwin*)
              opamrun exec -- "$_share"/t/bundle-diskuv-ocaml-"${{ matrix.dkml-host-abi }}".sh -o dist -e .tar.gz -t bsd tar --gzip
              ;;
            windows_*)
              opamrun exec -- find "$_share"/t -maxdepth 1 -name "setup-diskuv-ocaml-${{ matrix.dkml-host-abi }}-*.exe" -exec install {} dist/ \;
              ;;
          esac

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.dkml-host-abi }}
          path: dist/
      # BOILERPLATE END: setup-dkml

  #--------
  # Testing
  #--------

  # Direct testing is simply using GitHub virtual machine to run the setup.
  # Because GitHub virtual machine already has Visual Studio and several other
  # tools, it doesn't exercise all the paths that vagrant-testing covers.
  # However, it is quicker and it can find issues with conflicting Cygwin
  # (or any other of the many programs that are installed on a GitHub machine).
  # In addition, windows-2019 (somewhat older Windows) and windows-latest (2022, or
  # which is the latest) is tested ... Vagrant is closer to windows-latest
  # as of Apr 2022.
  direct-testing:
    # Wait for build
    needs:
      - build

    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2019
          - windows-latest
        dkml-host-abi:
          - windows_x86
          - windows_x86_64

    runs-on: ${{ matrix.os }}
    name: direct / ${{ matrix.os }} ${{ matrix.dkml-host-abi }}

    # For now we are trying to see why windows_x86 is having problems (1/2)
    # Actually, we know it is because setup.exe uses auto-detected host ABI instead of hardcoded ABI.
    continue-on-error: ${{ matrix.dkml-host-abi == 'windows_x86' }}

    steps:
      - name: Download and unpack ${{ matrix.dkml-host-abi }} artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.dkml-host-abi }}
          path: dist

      - name: Test the installer (Windows)
        env:
          # Fix PATH so that C:\Program Files\Git\usr\bin\cygpath.exe is gone
          PATH:
            "C:\\Program Files\\PowerShell\\7;\
            C:\\Program Files (x86)\\NSIS\\;\
            C:\\tools\\zstd;\
            C:\\Program Files\\dotnet;\
            C:\\Windows\\system32;\
            C:\\Windows;\
            C:\\Windows\\System32\\Wbem;\
            C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;\
            C:\\Program Files\\Docker;\
            C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit"
        # If we don't change the shell then msys2/setup-msys2@v2 will conflict with
        # the dkml-component-unixutils' MSYS2 ... you get:
        #    *** fatal error - cygheap base mismatch detected - 0x180348408/0x180349408.
        #   This problem is probably due to using incompatible versions of the cygwin DLL.
        shell: pwsh
        run: |
          $setups = Get-ChildItem -Path dist -Filter "setup-*.exe"
          foreach ($setup in $setups)
          {
            Write-Host "Running $($setup.FullName) ..."
            & $setup.FullName -v -v --color=always
            & "$env:LOCALAPPDATA\Programs\DiskuvOCaml\0\usr\bin\ocamlopt.exe" -config
          }

  # Vagrant testing uncovers bugs that only appear on a fresh Windows installation.
  # For example, found missing vcruntime140.dll with Vagrant testing.
  vagrant-testing:
    # Wait for build
    needs:
      - build

    strategy:
      fail-fast: false
      matrix:
        os: [ windows-2019 ]
        dkml-host-abi:
          - windows_x86
          - windows_x86_64

    # macOS is only GitHub CI runner that supports VirtualBox; https://stackoverflow.com/questions/66261101/using-vagrant-on-github-actions-ideally-incl-virtualbox
    runs-on: macos-10.15
    name: vagrant / ${{ matrix.dkml-host-abi }}

    # For now we are trying to see why windows_x86 is having problems (2/2)
    # Actually, we know it is because setup.exe uses auto-detected host ABI instead of hardcoded ABI.
    continue-on-error: ${{ matrix.dkml-host-abi == 'windows_x86' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download and unpack ${{ matrix.dkml-host-abi }} artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.dkml-host-abi }}
          path: dist

      - name: Cache Vagrant boxes
        uses: actions/cache@v2
        with:
          path: ~/.vagrant.d/boxes
          key: ${{ runner.os }}-vagrant-${{ hashFiles('vagrant/win32/Vagrantfile') }}
          restore-keys: |
            ${{ runner.os }}-vagrant-

      - name: Sanitize
        run: rm -rf ~/playground

      # - name: vagrant up for latest tag
      #   run: |
      #     #!/bin/sh
      #     set -eufx
      #     git describe --abbrev=0 --tags | tee vagrant/win32/tagversion.txt
      #     awk '$1=="version:"{print $2}' dkml-installer-network-ocaml.opam | tr -d '"' | tee vagrant/win32/opamversion.txt

      #     cd vagrant/win32
      #     vagrant up

      - name: vagrant up for ${{ matrix.dkml-host-abi }} build
        run: |
          #!/bin/sh
          set -eufx

          awk '$1=="version:"{print $2}' dkml-installer-network-ocaml.opam | tr -d '"' | tee vagrant/win32/opamversion.txt

          # Move artifact into the Vagrant filesystem as "setup.exe"
          mv dist/setup-diskuv-ocaml-${{matrix.dkml-host-abi}}-$(cat vagrant/win32/opamversion.txt).exe vagrant/win32/setup.exe

          cd vagrant/win32
          vagrant up

      - name: Check test_installation.t status
        run: |
          set -x ; EXITC=$(awk 'NF>0{print $1}' vagrant/win32/test_installation.t/exitcode.en-US.txt) ; if [ ! "$EXITC" = 0 ]; then echo "FATAL: Vagrant test_installation.t FAILED with exit code $EXITC"; exit 1; fi

      - name: Check playground creation
        run: |
          set -x ; find vagrant/win32/playground ; if [ ! -e vagrant/win32/playground/_opam/lib/graphics/graphics.cmx ]; then echo "FATAL: Vagrant playground creation FAILED"; exit 1; fi

  #--------
  # Release
  #--------

  release:
    runs-on: ubuntu-latest
    # Wait until `build` and `vagrant-testing` complete
    needs:
      - build
      - direct-testing
      - vagrant-testing
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Remove setup artifacts
        run: rm -rf setup-*
        working-directory: dist

      - name: Restructure multi-ABI directories
        run: |
          _release="$(pwd)/_release"
          install -d "$_release"

          cd dist
          find . -mindepth 1 -maxdepth 1 -type d | while read -r distname; do
            rsync -av $distname/ "$_release"
          done

      - name: Display files to be distributed
        run: ls -R
        working-directory: _release

      - name: Release (only when Git tag pushed)
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          prerelease: true # becomes a real release after it is signed externally
          files: |
            _release/*
