# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # ~~~~~~ Windows 10 Version 21H1 Enterprise (can be overridden by |machine|)
  config.vm.box = "gusztavvargadr/windows-10-enterprise"
  #config.vm.box_version = "2101.0.2109"
  config.vm.box_url = "https://public.communicator.diskuv.com/dkml/vagrant-mirror/gusztavvargadr/boxes/windows-10-enterprise/versions/2101.0.2109/providers/virtualbox.box"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

  # Virtual machines for GitLab CI or GitHub Actions matrix testing
  # ---------------------------------------------------------------
  #
  #   Sometimes a CI matrix of windows_x86 and windows_x86_64 lands on the
  #   same GitLab/GitHub CI machine. They can't use the same virtual
  #   machine or you get:
  #      ==> en-US: Mounting shared folders...
  #          en-US: /vagrant => /Users/runner/work/dkml-installer-ocaml/dkml-installer-ocaml/vagrant/win32
  #      Vagrant can't use the requested machine because it is locked! This
  #      means that another Vagrant process is currently reading or modifying
  #      the machine. Please wait for that Vagrant process to end and try
  #      again. Details about the machine are shown below:
  #      Name: en-US
  #      Provider: virtualbox
  #      Error: Process completed with exit code 1.
  #   So we need unique "Name: xxx" (the config.vm.define "xxx") for each CI
  #   matrix element, even if the contents of the machine are the same.
  #   Examples:
  #     "#{dkml_host_abi}"
  #     "#{dkml_host_abi}-#{ocaml_version}"

  ["windows_x86", "windows_x86_64"].each do |dkml_host_abi|

    # * You can search for boxes at https://vagrantcloud.com/search.
    # * We want to avoid HTTP 429 rate limiting on https://vagrantcloud.com/gusztavvargadr/boxes/windows-10-enterprise/versions/2101.0.2109/providers/virtualbox.box so
    #   use mirrored content on Diskuv Communicator CDN; it really should be on a Diskuv OCaml CDN when that is ready.
    # * SOP: SOP_UploadingPublicAssets.md of communicator infra (only available to Diskuv admins)
    # * Either specify box_version or box_url, or specify none.

    config.vm.define "#{dkml_host_abi}-windows-10-enterprise", autostart: false do |machine|
      # ~~~~~~ Windows 10 Version 21H1 Enterprise
      machine.vm.box = "gusztavvargadr/windows-10-enterprise"
      ##machine.vm.box_version = "2101.0.2109"
      machine.vm.box_url = "https://public.communicator.diskuv.com/dkml/vagrant-mirror/gusztavvargadr/boxes/windows-10-enterprise/versions/2101.0.2109/providers/virtualbox.box"

      machine.vm.provision "shell", inline: <<-SHELL
        C:\\vagrant\\test-language.ps1
      SHELL
    end

    config.vm.define "#{dkml_host_abi}-windows-10-21h2-enterprise", autostart: false do |machine|
      # ~~~~~~ Windows 10 Version 21H2 Enterprise
      machine.vm.box = "gusztavvargadr/windows-10-21h2-enterprise"
      #machine.vm.box_version = "2102.0.2211"
      machine.vm.box_url = "https://public.communicator.diskuv.com/dkml/vagrant-mirror/gusztavvargadr/boxes/windows-10-21h2-enterprise/versions/2102.0.2211/providers/virtualbox.box"

      machine.vm.provision "shell", inline: <<-SHELL
        C:\\vagrant\\test-language.ps1
      SHELL
    end

    config.vm.define "#{dkml_host_abi}-windows-10-22h2-enterprise-nocm", autostart: false do |machine|
      # ~~~~~~ Windows 10 Version 22H2 Enterprise NoCM
      #  > `-nocm` is the absence of Chocolately, Chef and SSH
      machine.vm.box = "gusztavvargadr/windows-10-22h2-enterprise-nocm"
      #machine.vm.box_version = "2202.0.2211"
      machine.vm.box_url = "https://public.communicator.diskuv.com/dkml/vagrant-mirror/gusztavvargadr/boxes/windows-10-22h2-enterprise-nocm/versions/2202.0.2211/providers/virtualbox.box"

      machine.vm.provision "shell", inline: <<-SHELL
        C:\\vagrant\\test-language.ps1
      SHELL
    end

    config.vm.define "#{dkml_host_abi}-windows-11-21h2-enterprise", autostart: false do |machine|
      # ~~~~~~ Windows 11 Version 21H2 Enterprise
      machine.vm.box = "gusztavvargadr/windows-11-21h2-enterprise"
      #machine.vm.box_version = "2102.0.2211"
      machine.vm.box_url = "https://public.communicator.diskuv.com/dkml/vagrant-mirror/gusztavvargadr/boxes/windows-11-21h2-enterprise/versions/2102.0.2211/providers/virtualbox.box"

      machine.vm.provision "shell", inline: <<-SHELL
        C:\\vagrant\\test-language.ps1
      SHELL
    end
  end

  # MAGIC VALUES
  # ============
  #
  # GeoId
  # -----
  # From https://docs.microsoft.com/en-us/windows/win32/intl/table-of-geographical-locations
  #
  # Locale
  # ------
  # Language tag in https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c

  config.vm.define "en-US", primary: true do |machine|
    machine.vm.provision "shell", inline: <<-SHELL
      C:\\vagrant\\test-language.ps1
    SHELL
  end

  # Use this to set this Windows language from the VirtualBox display window.
  # Then run `C:\vagrant\test-language.ps1` after rebooting.
  config.vm.define "manual", autostart: false do |machine|
    machine.vm.disk :dvd, name: "language-pack", file: "CLIENTLANGPACKDVD_OEM_MULTI.iso"
  end

  # Regression test for https://gitlab.com/diskuv/diskuv-ocaml/-/issues/1:
  #   Installation fails when Windows locale/culture has commas in its number format
  config.vm.define "fr-FR", autostart: false do |machine|
    machine.vm.disk :dvd, name: "language-pack", file: "CLIENTLANGPACKDVD_OEM_MULTI.iso"
    machine.vm.provision "shell", reboot: true, inline: <<-SHELL
      $locale = "fr-FR"
      $geoid = "84"
      Dism /online /Add-Package /PackagePath=D:\\x64\\langpacks\\Microsoft-Windows-Client-Language-Pack_x64_$locale.cab /NoRestart
      Add-AppxProvisionedPackage -Online -PackagePath D:\\LocalExperiencePack\\$locale\\LanguageExperiencePack.$locale.Neutral.appx -LicensePath D:\\LocalExperiencePack\\$locale\\License.xml

      Set-Culture -CultureInfo $locale
      Set-WinSystemLocale -SystemLocale $locale
      Set-WinUILanguageOverride -Language $locale
      Set-WinUserLanguageList $locale -Force
      Set-WinHomeLocation -GeoId $geoid
    SHELL
    machine.vm.provision "shell", reboot: true, inline: "lpksetup /r /s /u en-US"
    machine.vm.provision "shell", inline: "C:\\vagrant\\test-language.ps1"
  end

  # Regression testing for https://gitlab.com/diskuv/diskuv-ocaml/-/issues/6
  config.vm.define "zh-CN", autostart: false do |machine|
    machine.vm.disk :dvd, name: "language-pack", file: "CLIENTLANGPACKDVD_OEM_MULTI.iso"
    machine.vm.provision "shell", reboot: true, inline: <<-SHELL
      $locale = "zh-CN"
      $geoid = "45"
      Dism /online /Add-Package /PackagePath=D:\\x64\\langpacks\\Microsoft-Windows-Client-Language-Pack_x64_$locale.cab /NoRestart
      Add-AppxProvisionedPackage -Online -PackagePath D:\\LocalExperiencePack\\$locale\\LanguageExperiencePack.$locale.Neutral.appx -LicensePath D:\\LocalExperiencePack\\$locale\\License.xml

      Set-Culture -CultureInfo $locale
      Set-WinSystemLocale -SystemLocale $locale
      Set-WinUILanguageOverride -Language $locale
      Set-WinUserLanguageList $locale -Force
      Set-WinHomeLocation -GeoId $geoid
    SHELL
    machine.vm.provision "shell", reboot: true, inline: "lpksetup /r /s /u en-US"
    machine.vm.provision "shell", inline: "C:\\vagrant\\test-language.ps1"
  end
end
